<%@ Master Language="C#" MasterPageFile="~/Masters/core.master" %>

<%@ Import Namespace="System.Xml" %>
<%@ Import Namespace="Sage.Common.Syndication.Json" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="Sage.Platform.SData" %>
<%@ Import Namespace="Sage.Platform.Utility" %>
<%@ Import Namespace="Sage.SalesLogix.Plugins" %>
<%@ Import Namespace="Sage.Platform.Application.UI.Web" %>
<%@ Import Namespace="Sage.Platform.Application.UI" %>
<%@ Import Namespace="Sage.SalesLogix" %>
<%@ Import Namespace="Sage.Platform.Application" %>
<%@ Import Namespace="Sage.Platform.Application.Services" %>
<%@ Import Namespace="Sage.Platform.Security" %>
<%@ Import Namespace="Sage.Entity.Interfaces" %>
<%@ Import Namespace="System.IO" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="smartParts" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.Workspaces" TagPrefix="workSpace" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.Services" TagPrefix="Services" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.Workspaces.Tab" TagPrefix="tws" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.ScriptResourceProvider" TagPrefix="SalesLogix" %>
<%@ Register Assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" Namespace="System.Web.UI"
    TagPrefix="asp" %>

<script runat="server">

    protected void Page_Load(object sender, EventArgs e)
    {
        if (Page.IsPostBack)
        {
            return;
        }

        Response.Cache.SetCacheability(HttpCacheability.NoCache); // Otherwise OnPreRender doesn't get hit, and the Dashboard tabs may be old
    }

    protected override void OnPreRender(EventArgs e)
    {
        if (Page.IsPostBack)
        {
            return;
        }

        base.OnPreRender(e);
        StringBuilder script = new StringBuilder();
        string dashboardOptions = string.Empty;
        IUserOptionsService userOpts = ApplicationContext.Current.Services.Get<IUserOptionsService>();

        if (userOpts != null)
        {
            dashboardOptions = userOpts.GetCommonOption("Options", "Dashboard");
        }
        if (string.IsNullOrEmpty(dashboardOptions))
        {
            dashboardOptions = "{defaultTab: 'My Dashboard', hidden: {}}";
        }
        var plugins = PluginManager.GetPluginList(PluginType.DashboardPage, true, false);
        // append this to the global when the doc is ready
        // make sure the widgets don't block the UI
        script.Append("require([");
        script.AppendLine("\"dojo/ready\"");
        script.AppendLine("], function(");
        script.AppendLine("ready");
        script.AppendLine(") {");
        script.Append("ready(function(){ Sage.ns('UI.DataStore.Dashboard');");
        script.AppendFormat("Sage.UI.DataStore.Dashboard.userOptions = {0};", dashboardOptions);
        script.AppendFormat("Sage.UI.DataStore.Dashboard.widgetsList = {0};", GetWidgetList());
        script.AppendFormat("Sage.UI.DataStore.Dashboard.userPages = {0};", GetDashboardPages(plugins));
        script.AppendFormat("Sage.UI.DataStore.Dashboard.permissions = {0};", GetDashboardPagePermissions(plugins));
        script.AppendFormat("Sage.UI.DataStore.Dashboard.WidgetResources = {0};", JsonConvert.SerializeObject(GetWidgetResources()));
        // any subscriber will get called with the data object
        script.Append("dojo.publish('/ui/dashboard/info', [Sage.UI.DataStore.Dashboard]);});});");
        ScriptManager.RegisterClientScriptBlock(Page, GetType(), ClientID, script.ToString(), true);
    }

    private object GetWidgetResources()
    {
        var res = new Dictionary<string, string>();
        var fileName =
            // Look for specific, four-letter language code resx.
            File.Exists(Page.MapPath(String.Format("App_LocalResources/Widgets.{0}.resx", System.Globalization.CultureInfo.CurrentUICulture.Name)))
            ? Page.MapPath(String.Format("App_LocalResources/Widgets.{0}.resx", System.Globalization.CultureInfo.CurrentUICulture.Name)) :
            // If that doesn't exist, grab two-letter language code resx.
            File.Exists(Page.MapPath(String.Format("App_LocalResources/Widgets.{0}.resx", System.Globalization.CultureInfo.CurrentUICulture.TwoLetterISOLanguageName)))
            ? Page.MapPath(String.Format("App_LocalResources/Widgets.{0}.resx", System.Globalization.CultureInfo.CurrentUICulture.TwoLetterISOLanguageName))
            // Or fall-back to default.
            : Page.MapPath("App_LocalResources/Widgets.resx");
        try
        {
            using (var resProvider = new ScriptResourceProvider())
            {
                res = resProvider.GetResourceObject(fileName);
            }
        }
        catch (Exception)
        {
            //log failed to load widgetsresx
        }
        return res;
    }

    private static string GetWidgetList()
    {
        var plugins = PluginManager.GetPluginList(PluginType.DashboardWidget, true, false);
        var res = new Dictionary<string, string>();
        var enc = new System.Text.UTF8Encoding();
        var xml = new XmlDocument();
        String description;
        foreach (var p in plugins)
        {
            try
            {
                xml.LoadXml(enc.GetString(p.Blob.Data));
                description = xml.SelectSingleNode("Module/Description").InnerText;
            }
            catch
            {
                description = " ";
            }
            res.Add(p.Name, description);
        }
        return JsonConvert.SerializeObject(res);
    }

    private static string GetDashboardPagePermissions(IList<Plugin> plugins)
    {
        var res = new Dictionary<string, bool>();

        Sage.SalesLogix.Security.SLXUserService userService = Sage.Platform.Application.ApplicationContext.Current.Services.Get<IUserService>() as Sage.SalesLogix.Security.SLXUserService;
        if (userService != null)
        {
            IUser user = userService.GetUser();

            foreach (var p in plugins)
            {
                bool permission = ((user.Id.ToString()).Trim() == "ADMIN" || p.CreateUser == user.Id.ToString());
                res.Add(p.Name.Replace(' ', '_').Replace("'", "_"), permission);
            }
        }

        return JsonConvert.SerializeObject(res);
    }

    private static string GetDashboardPages(IList<Plugin> plugins)
    {
        var res = new List<string>();
        foreach (var p in plugins)
        {
            if (p.Blob.Data == null)
            {
                continue;
            }
            var xml = new XmlDocument();
            var enc = new System.Text.UTF8Encoding();
            res.Add(enc.GetString(p.Blob.Data));
        }
        return JsonConvert.SerializeObject(res);
    }



</script>
<asp:Content ContentPlaceHolderID="head" runat="Server">
    <style type="text/css">
        .dojoxGrid table {
            margin: 0;
        }

        .dj_ie6 .dropIndicator, .dj_ie6 .dojoxPortlet {
            margin: 5px;
        }

        .inforSoHoXi .dijitSplitContainer-child, .inforSoHoXi .dijitBorderContainer-child {
            border: none;
        }
    </style>
</asp:Content>
<asp:Content ContentPlaceHolderID="layers" runat="Server">
    <%-- Built layers, comment out for development --%>
    <script pin="pin" type="text/javascript" src="jscript/Sage/nls/Dashboard_<%# Global.Locale %>.js"></script>
    <script pin="pin" type="text/javascript" src="jscript/Sage/Dashboard-Combined.js"></script>

    <%--Sage Platform (Uncomment to load for development)
    <script pin="pin" src="Libraries/sdata/sdata-client-dependencies-debug.js" type="text/javascript"></script>
    <script pin="pin" src="jscript/sage-platform/sage-platform-servicecontainer.js" type="text/javascript"></script>
    <script pin="pin" src="jscript/sage-platform/gears_init.js" type="text/javascript"></script>--%>

    <%-- Third Party Libs (Uncomment to load for development)
    <script pin="pin" src="Libraries/sdata/sdata-client-debug.js" type="text/javascript"></script>
    <script pin="pin" src="Libraries/dhtmlxScheduler_v30/dhtmlxscheduler.js" type="text/javascript"></script>
    <script pin="pin" src="Libraries/dhtmlxScheduler_v30/ext/dhtmlxscheduler_timeline.js" type="text/javascript"></script>
    <script pin="pin" src="Libraries/Simplate.js" type="text/javascript"></script>
    <script pin="pin" src="jscript/FusionCharts.js" type="text/javascript"></script>
    <script pin="pin" src="Libraries/jQuery/jquery.js" type="text/javascript"></script>
    <script pin="pin" src="Libraries/jQuery/jquery-ui.js" type="text/javascript"></script>--%>
</asp:Content>
<asp:Content ContentPlaceHolderID="ContentPlaceHolderScriptResource" runat="Server">
    <SalesLogix:ScriptResourceProvider ID="MasterPageLinks" runat="server">
        <Keys>
            <SalesLogix:ResourceKeyName Key="Groups" />
            <SalesLogix:ResourceKeyName Key="IdleMessage" />
            <SalesLogix:ResourceKeyName Key="LogoffMessage" />
            <SalesLogix:ResourceKeyName Key="GettingStartedGuide" />
            <SalesLogix:ResourceKeyName Key="UnspecifiedError" />
        </Keys>
    </SalesLogix:ScriptResourceProvider>
</asp:Content>
<asp:Content ContentPlaceHolderID="ContentPlaceHolderMain" runat="Server">
    <!-- outer container center section -->
    <div data-dojo-type="Sage.UI.Dashboard.Dashboard" id="Dashboard" region="center" tabstrip="true">
        <!-- programmatically append the pages-->
    </div>
</asp:Content>
<asp:Content ContentPlaceHolderID="JsScriptFooter" runat="Server">
    <script type="text/javascript">
        require([
            'dojo/_base/html',
            'dijit/_base/manager',
            "dijit/layout/ContentPane",
            "dijit/layout/BorderContainer",
            "dijit/TitlePane",
            "dojo/ready",
            "dojo/_base/fx",
            "dojo/dom",
            "dojo/dom-class",
            "dojo/has",
            "dojo/_base/sniff",
            "dojo/_base/window",
            "Sage/Utility/PickList",
			//"Sage/Mingle/MingleSupport",
            "Sage/Groups/GroupManager",
            // Services are accessed a global way, TODO: Access using AMD
            "Sage/Services/ActivityAction",
            "Sage/Services/ActivityActionProcessor",
            "Sage/Services/ActivityService",
            "Sage/Services/CalendarSecurityService",
            "Sage/Services/ClientBindingManagerService",
            "Sage/Services/ClientContextService",
            "Sage/Services/ClientEntityContext",
            "Sage/Services/RoleSecurityService",
            "Sage/Services/SelectionContextService",
            "Sage/Services/SystemOptions",
            "Sage/Services/UserOptions",
            "Sage/Services/_ServiceMixin",
            "Sage/UI/Alarms/AlarmButton",
            "Sage/UI/Controls/HelpMenu",
            "Sage/UI/Controls/LogOffButton",
            "Sage/UI/Dashboard/Dashboard",
            "Sage/UI/DashboardGroupListConfigurationProvider",
            "Sage/UI/MenuBar",
            "Sage/UI/NavBar",
            "Sage/UI/SpeedSearch",
            "Sage/UI/TimeZoneItem",
            "Sage/Services/JobService",
            "Sage/UI/Alarms/JobNotificationButton",
            "Sage/Utility/Validate"
        ], function (
            html,
            manager,
            ContentPane,
            BorderContainer,
            TitlePane,
            ready,
            fx,
            dom,
            domClass,
            has,
            sniff,
            window,
            PickListUtil//,
            //mingleSupport
        ) {
            ready(function () {
                initGears();

                //For IE8, which does not have Date.now()
                if (!Date.now) {
                    Date.now = function () {
                        return new Date().valueOf();
                    };
                }
                if (has("ie") == 10) {
                    domClass.add(window.body(), "ie10");
                }
                setTimeout(function () {
                    var loader = dom.byId("loader");
                    fx.fadeOut({
                        node: loader,
                        duration: 1,
                        onEnd: function () {
                            loader.style.display = 'none';
                        }
                    }).play();
                }, 1);

                PickListUtil.checkStaleCache();
                //mingleSupport.publishIBCMessage(this.location);
            });
        });
    </script>
</asp:Content>
