<%@ Control Language="C#" ClassName="AddReturnProducts" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>
<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
     <tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft">
   <asp:Label ID="Product_lbl" AssociatedControlID="Product" runat="server" Text="<%$ resources: Product.Caption %>" ></asp:Label>
 </div>   
  <div  class="twocoltextcontrol lookup"  >
<SalesLogix:LookupControl runat="server" ID="Product" LookupEntityName="Product" LookupEntityTypeName="Sage.Entity.Interfaces.IProduct, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" SeedProperty="WarehouseID" AutoPostBack="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Product.LookupProperties.ActualId.PropertyHeader %>" PropertyName="ActualId" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Product.LookupProperties.UPC.PropertyHeader %>" PropertyName="UPC" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="False" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Product.LookupProperties.Name.PropertyHeader %>" PropertyName="Name" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="False" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Product.LookupProperties.Description.PropertyHeader %>" PropertyName="Description" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="False" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Product.LookupProperties.Price.PropertyHeader %>" PropertyName="Price" PropertyType="System.Decimal" PropertyFormat="None" PropertyFormatString="" UseAsResult="False" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Product.LookupProperties.Unit.PropertyHeader %>" PropertyName="Unit" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="False" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: Product.LookupProperties.WarehouseID.PropertyHeader %>" PropertyName="WarehouseID" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="False" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
<SalesLogix:LookupPreFilter PropertyName="Family" PropertyType="System.String" OperatorCode="="
 FilterValue="Exchange Returns"
 ></SalesLogix:LookupPreFilter>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
            </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="Description_lbl" AssociatedControlID="Description" runat="server" Text="<%$ resources: Description.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="Description" ReadOnly="true" Rows="1"
MaxLength="2147483647"
 />
  </div>

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="SKU_lbl" AssociatedControlID="SKU" runat="server" Text="<%$ resources: SKU.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="SKU" Rows="1"
MaxLength="64"
AutoPostBack="true"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="Quantity_lbl" AssociatedControlID="Quantity" runat="server" Text="<%$ resources: Quantity.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="Quantity" Rows="1" onkeypress="return Sage.Utility.restrictToNumberOnKeyPress(event, 'number')"
AutoPostBack="true"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="UPC_lbl" AssociatedControlID="UPC" runat="server" Text="<%$ resources: UPC.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="UPC" Rows="1"
MaxLength="32"
AutoPostBack="true"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="Price_lbl" AssociatedControlID="Price" runat="server" Text="<%$ resources: Price.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol currency"  >
    <SalesLogix:Currency runat="server" ID="Price" 
	ExchangeRateType=" BaseRate"
ReadOnly="true"  DecimalDigits="-1"  />
</div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtFamily_lbl" AssociatedControlID="txtFamily" runat="server" Text="<%$ resources: txtFamily.Caption %>" Visible="false" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtFamily" Rows="1"
MaxLength="32"
Visible="false"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="Discount_lbl" AssociatedControlID="Discount" runat="server" Text="<%$ resources: Discount.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol numeric"  > 
    <SalesLogix:NumericControl runat="server" ID="Discount"
ReadOnly="true" FormatType="Percent" Strict="False" 
 />
  </div>

      </td>
      </tr>
<tr>
            <td></td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="ExtendedPrice_lbl" AssociatedControlID="ExtendedPrice" runat="server" Text="<%$ resources: ExtendedPrice.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol currency"  >
    <SalesLogix:Currency runat="server" ID="ExtendedPrice" 
	ExchangeRateType=" BaseRate"
ReadOnly="true"  DecimalDigits="-1"  />
</div>

      </td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="AddReturnProducts_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="QFButton"
 AlternateText="<%$ resources: QFButton.Caption %>"  ToolTip="<%$ resources: QFButton.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
   
  <SalesLogix:PageLink ID="lnkAddReturnProductsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="AddReturnProducts" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>


<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.ISalesOrderItem); }
}

 

protected override void OnAddEntityBindings() {
                 // Product.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding ProductLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Product", Product, "LookupResultValue");
        BindingSource.Bindings.Add(ProductLookupResultValueBinding);
                    // Description.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding DescriptionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Description", Description, "Text");
        BindingSource.Bindings.Add(DescriptionTextBinding);
                    // SKU.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding SKUTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ActualID", SKU, "Text");
        BindingSource.Bindings.Add(SKUTextBinding);
                    // Quantity.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding QuantityTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Quantity", Quantity, "Text");
        BindingSource.Bindings.Add(QuantityTextBinding);
                    // UPC.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding UPCTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("UPC", UPC, "Text");
        BindingSource.Bindings.Add(UPCTextBinding);
                    // Price.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding PriceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Price", Price, "Text");
        BindingSource.Bindings.Add(PriceTextBinding);
                    // txtFamily.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtFamilyTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Family", txtFamily, "Text");
        BindingSource.Bindings.Add(txtFamilyTextBinding);
                    // Discount.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding DiscountTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Discount", Discount, "Text");
        BindingSource.Bindings.Add(DiscountTextBinding);
                    // ExtendedPrice.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding ExtendedPriceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ExtendedPrice", ExtendedPrice, "Text");
        BindingSource.Bindings.Add(ExtendedPriceTextBinding);
    
   
    }
                                                               
protected void Product_ChangeAction(object sender, EventArgs e) {
	//onchange event - need to update the parent property before running business rule
	Sage.Entity.Interfaces.ISalesOrderItem _entity = BindingSource.Current as Sage.Entity.Interfaces.ISalesOrderItem;
    if (_entity != null) {
        object _parent = GetParentEntity();
        if (DialogService.ChildInsertInfo != null) {
            if (_parent != null) {
                if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) {
                    DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
                }
            }
        }
    }


 	object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.SaveProductToSalesOrderItem", objarray);
  Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
    if (refresher != null) {
      refresher.RefreshAll();
    }
    else {  
      Response.Redirect(Request.Url.ToString());
    }

}
protected void SKU_ChangeAction(object sender, EventArgs e) {
	//SKU onchange
	Sage.Entity.Interfaces.ISalesOrderItem _entity = BindingSource.Current as Sage.Entity.Interfaces.ISalesOrderItem;
    if (_entity != null) {
        object _parent = GetParentEntity();
        if (DialogService.ChildInsertInfo != null) {
            if (_parent != null) {
                if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) {
                    DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
                }
            }
        }
    }
		
	object[] objarray = new object[] { this.BindingSource.Current };
    Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.SKUSearch", objarray);
	//Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.SaveProductToSalesOrderItem", objarray);
  Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
    if (refresher != null) {
      refresher.RefreshAll();
    }
    else {  
      Response.Redirect(Request.Url.ToString());
    }

}
protected void Quantity_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.CalculateExtendedPrice", objarray);

    Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
    if (refresher != null) {
      refresher.RefreshAll();
    }
    else {  
      Response.Redirect(Request.Url.ToString());
    }

}
protected void UPC_ChangeAction(object sender, EventArgs e) {
	//UPC onchange
	Sage.Entity.Interfaces.ISalesOrderItem _entity = BindingSource.Current as Sage.Entity.Interfaces.ISalesOrderItem;
    if (_entity != null) {
        object _parent = GetParentEntity();
        if (DialogService.ChildInsertInfo != null) {
            if (_parent != null) {
                if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) {
                    DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
                }
            }
        }
    }
		
	object[] objarray = new object[] { this.BindingSource.Current };
    Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.UPCSearch", objarray);
	//Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.SaveProductToSalesOrderItem", objarray);
  Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
    if (refresher != null) {
      refresher.RefreshAll();
    }
    else {  
      Response.Redirect(Request.Url.ToString());
    }

}
protected void QFButton_ClickAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.CalculateExtendedPrice", objarray);

          QFButton_ClickActionBRC(sender, e);
    
  
}
protected void QFButton_ClickActionBRC(object sender, EventArgs e) {
  Sage.Entity.Interfaces.ISalesOrderItem _entity = BindingSource.Current as Sage.Entity.Interfaces.ISalesOrderItem;
  if (_entity != null)
  {
    object _parent = GetParentEntity();
    if (DialogService.ChildInsertInfo != null)
    {
        if (_parent != null)
        {
            if (DialogService.ChildInsertInfo.ParentReferenceProperty != null)
            {
                DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
            }
        }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
    if (page != null)
    {
        if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
        {
            shouldSave = false;
        }
    }

    if(shouldSave)
    {
       _entity.Save();
    }

    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null)
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }
  }

  
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 Product.LookupResultValueChanged += new EventHandler(Product_ChangeAction);
SKU.TextChanged += new EventHandler(SKU_ChangeAction);
Quantity.TextChanged += new EventHandler(Quantity_ChangeAction);
UPC.TextChanged += new EventHandler(UPC_ChangeAction);
QFButton.Click += new ImageClickEventHandler(QFButton_ClickAction);
QFButton.Click += new ImageClickEventHandler(DialogService.CloseEventHappened);
QFButton.Click += new ImageClickEventHandler(Refresh);


}

protected void quickformload0(object sender, EventArgs e) {
	//Onload event
	//Limit the products list to products in the current warehouse only
    Sage.Entity.Interfaces.ISalesOrderItem _entity = BindingSource.Current as Sage.Entity.Interfaces.ISalesOrderItem;
    object _parent = GetParentEntity();
    if (DialogService.ChildInsertInfo != null) {
        if (_parent != null) {
            Sage.Entity.Interfaces.ISalesOrder salesOrder = _parent as Sage.Entity.Interfaces.ISalesOrder;					
			string userWarehouse = salesOrder.UserWareHouse.SiteCodeId;
						
            //LookupPreFilter warehouse = new LookupPreFilter("Warehouse", userWarehouse);
            //warehouse.CondOperator = "=";
            //warehouse.PropertyName = "WarehouseID";			
			//LookupPreFilter family = new LookupPreFilter("Family", "Exchangeable");
			//Product.LookupPreFilters.Clear; 
            //Product.LookupPreFilters.Add(warehouse);             
			Product.SeedValue = userWarehouse;
        }
    }

}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ClientBindingMgr.RegisterSaveButton(QFButton);



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new AddReturnProductsAdapter(this)); }
}

public class AddReturnProductsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IAddReturnProducts
{
    public AddReturnProductsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ILookupControl _Product;
    public  Sage.Platform.Controls.ILookupControl Product
    {
        get { return FindControl(ref _Product, "Product"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _Description;
    public  Sage.Platform.Controls.ITextBoxControl Description
    {
        get { return FindControl(ref _Description, "Description"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _SKU;
    public  Sage.Platform.Controls.ITextBoxControl SKU
    {
        get { return FindControl(ref _SKU, "SKU"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _UPC;
    public  Sage.Platform.Controls.ITextBoxControl UPC
    {
        get { return FindControl(ref _UPC, "UPC"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtFamily;
    public  Sage.Platform.Controls.ITextBoxControl txtFamily
    {
        get { return FindControl(ref _txtFamily, "txtFamily"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _Quantity;
    public  Sage.Platform.Controls.ITextBoxControl Quantity
    {
        get { return FindControl(ref _Quantity, "Quantity"); }
    }
    private Sage.Platform.Controls.ICurrencyControl _Price;
    public  Sage.Platform.Controls.ICurrencyControl Price
    {
        get { return FindControl(ref _Price, "Price"); }
    }
    private Sage.Platform.Controls.INumericControl _Discount;
    public  Sage.Platform.Controls.INumericControl Discount
    {
        get { return FindControl(ref _Discount, "Discount"); }
    }
    private Sage.Platform.Controls.ICurrencyControl _ExtendedPrice;
    public  Sage.Platform.Controls.ICurrencyControl ExtendedPrice
    {
        get { return FindControl(ref _ExtendedPrice, "ExtendedPrice"); }
    }
    private Sage.Platform.Controls.IButtonControl _QFButton;
    public  Sage.Platform.Controls.IButtonControl QFButton
    {
        get { return FindControl(ref _QFButton, "QFButton"); }
    }

}

</script>

<script type="text/javascript">
    Quantity.Attributes.Add("onkeypress", "return Sage.Utility.restrictToNumberOnKeyPress(event, 'number')");
    Quantity.Attributes.Add("onkeyup", "return Sage.Utility.restrictDecimalDigit(event)");
</script>
