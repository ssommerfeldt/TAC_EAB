<?xml version="1.0"?>
<QuickForm xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="cd7c4bed-57fd-4cc2-83f0-a8339a531583" DefinitionType="Sage.Platform.QuickForms.QuickFormMainDetailViewDefinition, Sage.Platform.QuickForms">
  <ActiveControl />
  <ImagePath />
  <LoadActions>
    <FormActionDefinition>
      <ResourceKey>41cd1417-e6e9-4e4a-8eca-b36ebcb34452</ResourceKey>
      <Action typeName="Sage.Platform.QuickForms.ActionItems.CSharpSnippetActionItem, Sage.Platform.QuickForms">
        <CSharpSnippetActionItem>
          <MethodName>quickformload0</MethodName>
          <CSharpCodeSnippet>// TAC Code Here
//Get Current user
 //   Sage.SalesLogix.Security.SLXUserService usersvc = (Sage.SalesLogix.Security.SLXUserService)Sage.Platform.Application.ApplicationContext.Current.Services.Get&lt;Sage.Platform.Security.IUserService&gt;();
//    Sage.Entity.Interfaces.IUser currentuser = usersvc.GetUser();


    Sage.Entity.Interfaces.IAccount  myparent = this.GetParentEntity() as Sage.Entity.Interfaces.IAccount  ;
    //==========================================================================
    
    
    lueProductGroup.SeedValue = myparent.AccountManager.Id.ToString () ;
    txtProductCategoryid.Visible = false;
    txtProductCategory.Visible = false;
    txtProductCategory_lbl.Visible = false;</CSharpCodeSnippet>
        </CSharpSnippetActionItem>
      </Action>
      <IsDialogCloseAction>False</IsDialogCloseAction>
      <RunOnEveryRePaint>False</RunOnEveryRePaint>
      <DialogActionResult>NoResult</DialogActionResult>
      <PerformsUpdate>False</PerformsUpdate>
      <AppliedSecurity />
      <RefreshData>False</RefreshData>
    </FormActionDefinition>
  </LoadActions>
  <Name>AddStockCardItemsbyGroup</Name>
  <ClientScriptIncludes />
  <ClientResourceKeys />
  <ExtendedProperties />
  <HelpFile />
  <ReadOnly>false</ReadOnly>
  <GeneratePrintView>false</GeneratePrintView>
  <Controls>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFTextBox, Sage.Platform.QuickForms">
      <QFTextBox>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>Margin</ControlId>
        <DataBindings>
          <QuickFormPropertyDataBindingDefinition>
            <DataSourceID>MainEntity</DataSourceID>
            <DataItemName>Margin</DataItemName>
            <ControlItemName>Text</ControlItemName>
            <FormatString />
            <NullValueString />
          </QuickFormPropertyDataBindingDefinition>
        </DataBindings>
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <OnChangeAction>
          <ResourceKey>Margin</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.NoActionActionItem, Sage.Platform.QuickForms">
            <NoActionActionItem>
              <MethodName />
            </NoActionActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>False</RefreshData>
        </OnChangeAction>
        <Required>false</Required>
      </QFTextBox>
    </Control>
    <Control typeName="Sage.SalesLogix.QuickForms.QFControls.QFSLXLookup, Sage.SalesLogix.QuickForms.QFControls">
      <QFSLXLookup>
        <Column>0</Column>
        <Row>1</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>lueProductGroup</ControlId>
        <DataBindings>
          <QuickFormPropertyDataBindingDefinition>
            <DataSourceID>MainEntity</DataSourceID>
            <DataItemName>TIMPRODCATEGORYID</DataItemName>
            <ControlItemName>LookupResultValue</ControlItemName>
            <FormatString />
            <NullValueString />
          </QuickFormPropertyDataBindingDefinition>
        </DataBindings>
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <OnChangeAction>
          <ResourceKey>lueProductGroup</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.CSharpSnippetActionItem, Sage.Platform.QuickForms">
            <CSharpSnippetActionItem>
              <MethodName>lueProductGroup_ChangeAction</MethodName>
              <CSharpCodeSnippet>// TAC Code Here 
Sage.Entity.Interfaces.IStockCardItems entity = (Sage.Entity.Interfaces.IStockCardItems)this.BindingSource.Current;
    Sage.Entity.Interfaces.IAccount Account = (Sage.Entity.Interfaces.IAccount)this.GetParentEntity();
   //
	string productGroupid = lueProductGroup.LookupResultValue.ToString ();
    Double tmpDbl = entity.GetDefaultMargin(productGroupid, Account);
    if (tmpDbl == 0)
    {
        // do Nothing as there is no Default Margin

    }
    else
    {
        entity.Margin = tmpDbl;
        Margin.Text = tmpDbl.ToString ();
        lueProductGroup.LookupResultValue = productGroupid;
        lueProductGroup.Visible = false;
        lueProductGroup_lbl.Visible = false;
        txtProductCategoryid.Text = productGroupid;
        txtProductCategoryid.Visible = false;
        //Set the Product Name
         Sage.Platform.Data.IDataService datasvc = Sage.Platform.Application.ApplicationContext.Current.Services.Get&lt;Sage.Platform.Data.IDataService&gt;();
         using (System.Data.OleDb.OleDbConnection conn = new System.Data.OleDb.OleDbConnection(datasvc.GetConnectionString()))
         {
             conn.Open();

             using (System.Data.OleDb.OleDbCommand cmd = new System.Data.OleDb.OleDbCommand("Select Description  from sysdba.vlueProductGroup Where PRODCATEGORYID = '" + productGroupid + "'", conn))
             {
                 //Check to see if the Accounts Stock Cards Match the Current Number of SalesOrderItems
                 txtProductCategory.Visible = true;
                 txtProductCategory_lbl.Visible = true;
                 txtProductCategory.Text  = (string)cmd.ExecuteScalar();

             }
         }
    }
</CSharpCodeSnippet>
            </CSharpSnippetActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>False</RefreshData>
        </OnChangeAction>
        <Required>false</Required>
        <LookupImage />
        <LookupDialogWidth xsi:nil="true" />
        <LookupDialogHeight xsi:nil="true" />
        <LookupBindingMode>String</LookupBindingMode>
        <LookupResultValue xsi:type="xsd:string" />
        <SeedProperty>UserId</SeedProperty>
        <SeedValue />
        <DropDownDisplayProperty />
        <AllowClearingResult>false</AllowClearingResult>
        <AppendStringValues>false</AppendStringValues>
        <OverrideSeedOnSearch>false</OverrideSeedOnSearch>
        <LookupEntityName>Vlueproductgroup</LookupEntityName>
        <LookupEntityTypeName>Sage.Entity.Interfaces.IVlueproductgroup, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null</LookupEntityTypeName>
        <AutoPostBack>false</AutoPostBack>
        <EnableHyperLinking>false</EnableHyperLinking>
        <InitializeLookup>true</InitializeLookup>
        <LookupProperties>
          <LookupProperty>
            <PropertyName>Description</PropertyName>
            <PropertyType>System.String</PropertyType>
            <PropertyHeader>Description</PropertyHeader>
            <PropertyFormat>None</PropertyFormat>
            <PropertyFormatString />
            <UseAsResult>true</UseAsResult>
            <ExcludeFromFilters>false</ExcludeFromFilters>
            <IsSortable>true</IsSortable>
            <HideCondition />
          </LookupProperty>
          <LookupProperty>
            <PropertyName>Icount</PropertyName>
            <PropertyType>System.Int32</PropertyType>
            <PropertyHeader>Icount</PropertyHeader>
            <PropertyFormat>None</PropertyFormat>
            <PropertyFormatString />
            <UseAsResult>true</UseAsResult>
            <ExcludeFromFilters>false</ExcludeFromFilters>
            <IsSortable>true</IsSortable>
            <HideCondition />
          </LookupProperty>
          <LookupProperty>
            <PropertyName>ProdcategoryId</PropertyName>
            <PropertyType>System.String</PropertyType>
            <PropertyHeader>ProdcategoryId</PropertyHeader>
            <PropertyFormat>None</PropertyFormat>
            <PropertyFormatString />
            <UseAsResult>true</UseAsResult>
            <ExcludeFromFilters>false</ExcludeFromFilters>
            <IsSortable>true</IsSortable>
            <HideCondition />
          </LookupProperty>
        </LookupProperties>
        <LookupPreFilters>
          <LookupPreFilter>
            <LookupEntityName>IVlueproductgroup</LookupEntityName>
            <PropertyType />
            <OperatorCode>!=</OperatorCode>
            <PickListName />
            <PropertyName />
            <FilterValue />
          </LookupPreFilter>
        </LookupPreFilters>
      </QFSLXLookup>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFTextBox, Sage.Platform.QuickForms">
      <QFTextBox>
        <Column>0</Column>
        <Row>2</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>txtProductCategory</ControlId>
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <OnChangeAction>
          <ResourceKey>txtProductCategory</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.NoActionActionItem, Sage.Platform.QuickForms">
            <NoActionActionItem>
              <MethodName />
            </NoActionActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>False</RefreshData>
        </OnChangeAction>
        <Required>false</Required>
      </QFTextBox>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFTextBox, Sage.Platform.QuickForms">
      <QFTextBox>
        <Column>0</Column>
        <Row>3</Row>
        <IsReadOnly>true</IsReadOnly>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>txtProductCategoryid</ControlId>
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <OnChangeAction>
          <ResourceKey>txtProductCategoryid</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.NoActionActionItem, Sage.Platform.QuickForms">
            <NoActionActionItem>
              <MethodName />
            </NoActionActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>False</RefreshData>
        </OnChangeAction>
        <Required>false</Required>
      </QFTextBox>
    </Control>
  </Controls>
  <ToolControls>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFElementSpacer, Sage.Platform.QuickForms">
      <QFElementSpacer>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId />
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
      </QFElementSpacer>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFElementSpacer, Sage.Platform.QuickForms">
      <QFElementSpacer>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId />
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
      </QFElementSpacer>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFButton, Sage.Platform.QuickForms">
      <QFButton>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>QFButton</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <ButtonType>Icon</ButtonType>
        <Image>[Localization!Global_Images:Save_16x16]</Image>
        <OnClientClick />
        <OnClickAction>
          <ResourceKey>QFButton</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.CSharpSnippetActionItem, Sage.Platform.QuickForms">
            <CSharpSnippetActionItem>
              <MethodName>QFButton_ClickAction</MethodName>
              <CSharpCodeSnippet>// TAC Code Here
    Sage.Entity.Interfaces.IStockCardItems entity = (Sage.Entity.Interfaces.IStockCardItems)this.BindingSource.Current;
    Sage.Entity.Interfaces.IAccount Account = (Sage.Entity.Interfaces.IAccount)this.GetParentEntity();
    
    //===============================================================
    // Count Before Adding to See if we need to Do a Full Refresh
    //===============================================================
    
    string SQL = "SELECT    distinct sysdba.PRODUCT.WAREHOUSEID";
    SQL += " FROM         sysdba.STOCKCARDITEMS INNER JOIN";
    SQL += "                      sysdba.PRODUCT ON sysdba.STOCKCARDITEMS.PRODUCTID = sysdba.PRODUCT.PRODUCTID";
    SQL += "                      Where ACCOUNTID = '" + Account.Id.ToString() + "'";

    bool hasItems = false; // Intialize
    // Generate In SQL statement
    Sage.Platform.Data.IDataService datasvc = Sage.Platform.Application.ApplicationContext.Current.Services.Get&lt;Sage.Platform.Data.IDataService&gt;();
    //using (System.Data.OleDb.OleDbConnection conn = new System.Data.OleDb.OleDbConnection(datasvc.GetConnectionString()))
    using (System.Data.OleDb.OleDbConnection conn = new System.Data.OleDb.OleDbConnection(datasvc.GetConnectionString()))
    {
        conn.Open();
        using (System.Data.OleDb.OleDbCommand cmd = new System.Data.OleDb.OleDbCommand(SQL, conn))
        {
            System.Data.OleDb.OleDbDataReader r = cmd.ExecuteReader(System.Data.CommandBehavior.CloseConnection);
            while (r.Read())
            {

                hasItems = true; // This is used to determine if we need to do a Full Refresh.
                

            }
            r.Close();
        }
    }



    entity.AddProductGroupItems(txtProductCategoryid.Text , Account, Double.Parse(Margin.Text));
//ScriptManager.RegisterStartupScript(this, GetType(), "refresh", "window.setTimeout('window.location.reload(true);',50);", true);
//Sage.Platform.WebPortal.Services.IPanelRefreshService refresher1 = PageWorkItem.Services.Get&lt;Sage.Platform.WebPortal.Services.IPanelRefreshService&gt;();
//    if (refresher1 != null)
//    {
//        refresher1.RefreshAll();
//    }
//    else
//    {
//        Response.Redirect(Request.Url.ToString());
//    }
  Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get&lt;Sage.Platform.WebPortal.Services.IPanelRefreshService&gt;();
    if (refresher != null) {
      refresher.RefreshAll();
    }
    else {  
      Response.Redirect(Request.Url.ToString());
    }
    //========================================================
    // Do a Full Refresh  F5
    //=========================================================
    if (hasItems== false )
    {
        ScriptManager.RegisterStartupScript(this, GetType(), "refresh", "window.setTimeout('window.location.reload(true);',50);", true);
    }</CSharpCodeSnippet>
            </CSharpSnippetActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>DialogOK</DialogActionResult>
          <PerformsUpdate>True</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>False</RefreshData>
        </OnClickAction>
      </QFButton>
    </Control>
  </ToolControls>
  <Columns>
    <ColumnStyle>
      <SizeType>Percent</SizeType>
      <Width>100</Width>
    </ColumnStyle>
  </Columns>
  <Rows>
    <RowStyle>
      <SizeType>Absolute</SizeType>
      <Height>35</Height>
    </RowStyle>
    <RowStyle>
      <SizeType>Absolute</SizeType>
      <Height>35</Height>
    </RowStyle>
    <RowStyle>
      <SizeType>Absolute</SizeType>
      <Height>35</Height>
    </RowStyle>
    <RowStyle>
      <SizeType>Absolute</SizeType>
      <Height>35</Height>
    </RowStyle>
    <RowStyle>
      <SizeType>Absolute</SizeType>
      <Height>35</Height>
    </RowStyle>
  </Rows>
  <Description />
  <UseEntityNameAsTitle>true</UseEntityNameAsTitle>
  <EntityTypeName>IStockCardItems</EntityTypeName>
  <DefaultNamespace>Sage.Entity.Interfaces</DefaultNamespace>
  <AssemblyName>Sage.Entity.Interfaces</AssemblyName>
</QuickForm>