<?xml version="1.0"?>
<QuickForm xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="90e12bf4-fd63-47e4-b713-d69cfd0d2e09" DefinitionType="Sage.Platform.QuickForms.QuickFormMainDetailViewDefinition, Sage.Platform.QuickForms" lastModifiedUtc="2017-11-01T02:17:43.4822891Z">
  <ActiveControl />
  <ImagePath />
  <LoadActions>
    <FormActionDefinition>
      <ResourceKey>bf48998d-0a7a-4649-9b73-71b442ebf292</ResourceKey>
      <Action typeName="Sage.Platform.QuickForms.ActionItems.CSharpSnippetActionItem, Sage.Platform.QuickForms">
        <CSharpSnippetActionItem>
          <MethodName>quickformload0</MethodName>
          <CSharpCodeSnippet>var salesOrder = this.BindingSource.Current as ISalesOrder;
if (salesOrder != null)
{
    var closed = salesOrder.IsClosed();
    var clientContextService = PageWorkItem.Services.Get&lt;Sage.Platform.WebPortal.Services.ClientContextService&gt;();
    if (clientContextService != null)
    {
        clientContextService.CurrentContext["ExchangeRate"] = salesOrder.ExchangeRate != null ? salesOrder.ExchangeRate.ToString() : "1";
        clientContextService.CurrentContext["IsClosed"] = closed.ToString();
    }
	if (closed)
	{
    	btnAddCustomProduct.Visible = false;
    	btnRenumber.Visible = false;	
	}
}</CSharpCodeSnippet>
        </CSharpSnippetActionItem>
      </Action>
      <IsDialogCloseAction>False</IsDialogCloseAction>
      <RunOnEveryRePaint>True</RunOnEveryRePaint>
      <DialogActionResult>NoResult</DialogActionResult>
      <PerformsUpdate>False</PerformsUpdate>
      <AppliedSecurity />
      <RefreshData>False</RefreshData>
    </FormActionDefinition>
    <FormActionDefinition>
      <ResourceKey>90791539-c253-4402-a54f-0860cfbe893a</ResourceKey>
      <Action typeName="Sage.Platform.QuickForms.ActionItems.CodeSnippetActionItem, Sage.Platform.QuickForms">
        <CodeSnippetActionItem methodId="a9a32432-7fbd-4971-bde0-0740a2aadcb4">
          <MethodName>quickformload1</MethodName>
        </CodeSnippetActionItem>
      </Action>
      <IsDialogCloseAction>False</IsDialogCloseAction>
      <RunOnEveryRePaint>False</RunOnEveryRePaint>
      <DialogActionResult>NoResult</DialogActionResult>
      <PerformsUpdate>False</PerformsUpdate>
      <AppliedSecurity />
      <RefreshData>False</RefreshData>
    </FormActionDefinition>
  </LoadActions>
  <Name>SalesOrderProducts</Name>
  <ClientScriptIncludes>
    <string>jscript/Sage/Utility/PricingAndAvailability.js</string>
  </ClientScriptIncludes>
  <ClientResourceKeys>
    <string>error_ZeroBasePrice</string>
    <string>error_AccountingSystem_Undefined</string>
    <string>error_ClientContext_Undefined</string>
    <string>error_ExecutingRequest</string>
    <string>error_ExecutingRequestExt</string>
    <string>error_PricingRequest</string>
    <string>productStatus_Discontinued</string>
  </ClientResourceKeys>
  <ExtendedProperties />
  <HelpFile />
  <ReadOnly>false</ReadOnly>
  <GeneratePrintView>false</GeneratePrintView>
  <Controls>
    <Control typeName="Sage.SalesLogix.QuickForms.QFControls.SDataGrid.QFSDataGrid, Sage.SalesLogix.QuickForms.QFControls">
      <QFSDataGrid>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>grdItems</ControlId>
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <GenerateMember>false</GenerateMember>
        <ReadOnlyCondition>function()
{					
	var clientContextService = Sage.Services.getService('ClientContextService');
	var closed = clientContextService != null &amp;&amp; clientContextService.getValue("IsClosed");
	return closed == 'True';
}


</ReadOnlyCondition>
        <AppliedSecurity />
        <RelateToPropertyName>SalesOrderItems</RelateToPropertyName>
        <PreviewField />
        <ResourceKind>
          <Name>salesOrderItems</Name>
          <GetPredicate />
        </ResourceKind>
        <PathSegments />
        <Columns>
          <QFSDataEditCol>
            <StyleScheme />
            <DataField>Id</DataField>
            <ColumnId>a8c6d9fd-1bde-4d02-b2a8-f56adc076935</ColumnId>
            <HorizontalAlignment>center</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>false</IsSortable>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <DialogSpecs>
              <SmartPart>EditSalesOrderItem</SmartPart>
              <Height>375</Height>
              <Width>950</Width>
              <Top>0</Top>
              <Left>0</Left>
              <EntityType>SalesOrderItem</EntityType>
              <ResourceKey>f842ee53-0b9f-43c7-858c-57afa8508f76</ResourceKey>
              <CenterDialog>True</CenterDialog>
            </DialogSpecs>
            <AppliedSecurity>Entities/SalesOrder/Edit</AppliedSecurity>
            <HideCondition />
            <Width>4</Width>
          </QFSDataEditCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>LineNumber</DataField>
            <ColumnId>530b7cdb-cef1-4e94-a46a-cf8d931ff779</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>Ascending</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>LineNumber</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>	  
function () {
		return isBackOfficeIntegrationEnabled() &amp;&amp; !isLocalCRMPricingEnabled('SalesOrder');
}</HideCondition>
            <Width>3</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>ErpLineNumber</DataField>
            <ColumnId>7e5c4214-796b-4013-bf3e-dd5d42b3fa08</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>ErpLineNumber</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>False</IsEditable>
            <HideCondition>function () {
		return !(isBackOfficeIntegrationEnabled() &amp;&amp; !isLocalCRMPricingEnabled('SalesOrder'));
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>ProductName</DataField>
            <ColumnId>0c39de35-d246-4c4b-a1fa-57a0a9be41c6</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>ProductName</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>15</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>Description</DataField>
            <ColumnId>506f0947-d9d3-441f-bfed-329263b9df81</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Description</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>ErpStatus</DataField>
            <ColumnId>a5c16453-4bc4-417a-9220-0208c6477155</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>Ascending</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>ErpStatus</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function()
{  
  return  !isCPQIntegrationEnabled();
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter>function (value, item) {
    var options = {
        item: item,
        resourceKind: 'salesOrders',
        lineResourceKind: 'SalesOrderItems',
        securedAction: 'Entities/SalesOrder/Configurator'
    }
    return Sage.Utility.PricingAndAvailability.requestCPQStatus(options);
}</CustomFormatter>
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFSDataLookupCol>
            <StyleScheme />
            <DataField>Program</DataField>
            <ColumnId>a74f322c-ebd9-49d4-ad41-3bcd939e8b41</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Program</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition>function () {
  return ((isIntegrationContractEnabled() &amp;&amp; !isLocalCRMPricingEnabled('SalesOrder')) || isCPQIntegrationEnabled());  
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <SeedOnRowEntity>false</SeedOnRowEntity>
            <SeedOnRelatedEntity>Product</SeedOnRelatedEntity>
            <ConditionalWhere />
            <ResourceKind>productPrograms</ResourceKind>
            <LookupBindingMode>String</LookupBindingMode>
            <LookupDisplayProperty>Program</LookupDisplayProperty>
          </QFSDataLookupCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>SlxLocation.Name</DataField>
            <ColumnId>683c40a1-4afa-4b03-96c2-06e54df18fd7</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>SlxLocation.Name</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
		return !(isBackOfficeIntegrationEnabled() &amp;&amp; !isLocalCRMPricingEnabled('SalesOrder'));
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter>function (value, item) {
	var options = {
	item: item,
	resourceKind: 'salesOrders',
	entityName: 'SalesOrder',
	entityId: Sage.Utility.getCurrentEntityId(),
	childEntityName: 'SalesOrderItem',
	childEntityIds: item.$key,
	serviceName: 'AvailableToPromise',
	priceServiceName: 'OrderLineTotal',
	gridId: this.grid.id,
	configuredItem: !!item.Product &amp;&amp; item.Product.ErpConfiguredItem
}
	return Sage.Utility.PricingAndAvailability.buildWarehouseUrl(options);
}</CustomFormatter>
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>Price</DataField>
            <ColumnId>3ef53358-80dd-4e3f-99fb-355cb397a797</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Price</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>10</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode />
            <ExchangeRate />
            <ExchangeRateType>BaseRate</ExchangeRateType>
            <DecimalDigits>4</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataNumericCol>
            <StyleScheme />
            <DataField>Discount</DataField>
            <ColumnId>983c7b9b-3c12-48e3-add2-73ff8cd065c2</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Discount</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition>function () {
		return isIntegrationContractEnabled() &amp;&amp; !isLocalCRMPricingEnabled('SalesOrder');
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <DecimalDigits>
              <DecimalDigits>4</DecimalDigits>
              <Strict>false</Strict>
            </DecimalDigits>
            <FormatType>Percent</FormatType>
          </QFSDataNumericCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>CalculatedPrice</DataField>
            <ColumnId>5cd443a0-928c-44a2-86f2-a4246f8223c7</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>CalculatedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>function () {
		return !(isBackOfficeIntegrationEnabled() &amp;&amp; !isLocalCRMPricingEnabled('SalesOrder'));
}</IsEditable>
            <HideCondition />
            <Width>10</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode />
            <ExchangeRate />
            <ExchangeRateType>BaseRate</ExchangeRateType>
            <DecimalDigits>4</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>DocCalculatedPrice</DataField>
            <ColumnId>28d57a8b-13ca-47c0-b41e-d969ed17dc28</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>DocCalculatedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
    return !isMultiCurrencyEnabled();
}</HideCondition>
            <Width>10</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode>SalesOrder.CurrencyCode</CurrentCode>
            <ExchangeRate />
            <ExchangeRateType>EntityRate</ExchangeRateType>
            <DecimalDigits>4</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataNumericCol>
            <StyleScheme />
            <DataField>Quantity</DataField>
            <ColumnId>0fd9479b-1d6f-497f-a870-26efbf44550d</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Quantity</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition />
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <DecimalDigits>
              <DecimalDigits>4</DecimalDigits>
              <Strict>false</Strict>
            </DecimalDigits>
            <FormatType>Number</FormatType>
          </QFSDataNumericCol>
          <QFSDataLookupCol>
            <StyleScheme />
            <DataField>UnitOfMeasure</DataField>
            <ColumnId>eef3d53b-092f-4f1b-9429-22cfd8dd2bf4</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>UnitOfMeasure</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition>function () {
		return !(isBackOfficeIntegrationEnabled() &amp;&amp; !isLocalCRMPricingEnabled('SalesOrder'));
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <SeedOnRowEntity>true</SeedOnRowEntity>
            <SeedOnRelatedEntity>Product</SeedOnRelatedEntity>
            <ConditionalWhere />
            <ResourceKind>unitsOfMeasure</ResourceKind>
            <LookupBindingMode>Object</LookupBindingMode>
            <LookupDisplayProperty>Name</LookupDisplayProperty>
          </QFSDataLookupCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>ExtendedPrice</DataField>
            <ColumnId>68096333-c869-44c2-9b19-51d9058e50d8</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>ExtendedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>10</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode />
            <ExchangeRate />
            <ExchangeRateType>BaseRate</ExchangeRateType>
            <DecimalDigits>4</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>DocExtendedPrice</DataField>
            <ColumnId>ff4abcfa-992a-4721-8841-c0c0b6e89485</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>DocExtendedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
    return !isMultiCurrencyEnabled();
}</HideCondition>
            <Width>10</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode>SalesOrder.CurrencyCode</CurrentCode>
            <ExchangeRate />
            <ExchangeRateType>EntityRate</ExchangeRateType>
            <DecimalDigits>4</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>DocTotalAmount</DataField>
            <ColumnId>cd0a2117-86c5-43b9-b134-38f459a522c0</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>DocTotalAmount</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>False</IsEditable>
            <HideCondition>function()
{  
  return !isBackOfficeIntegrationEnabled() || isLocalCRMPricingEnabled('SalesOrder'); 
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode>SalesOrder.CurrencyCode</CurrentCode>
            <ExchangeRate />
            <ExchangeRateType>EntityRate</ExchangeRateType>
            <DecimalDigits>4</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>ConfigurationID</DataField>
            <ColumnId>7b511ac9-aa2b-4a8d-aa6d-105f9581f43a</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>false</IsSortable>
            <SortField>ConfigurationID</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>False</IsEditable>
            <HideCondition>function()
{  
  return (!isBackOfficeIntegrationEnabled() || !isCPQIntegrationEnabled()); 
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>ConfigurationDetailID</DataField>
            <ColumnId>c714f725-ab4e-4ad6-8c74-9a1f3b009c21</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>false</IsSortable>
            <SortField>ConfigurationDetailID</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>False</IsEditable>
            <HideCondition>function()
{  
  return (!isBackOfficeIntegrationEnabled() || !isCPQIntegrationEnabled()); 
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFSDataCheckBoxCol>
            <StyleScheme />
            <DataField>Product.ErpConfiguredItem</DataField>
            <ColumnId>0995a58e-df41-4cc0-afc1-a230052e2d23</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>false</IsSortable>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function()
{return true;}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFSDataCheckBoxCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>TotalAmount</DataField>
            <ColumnId>52117937-4434-4e81-b939-306e5dec6a3b</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>TotalAmount</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>False</IsEditable>
            <HideCondition>function() { return true; }</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode />
            <ExchangeRate />
            <ExchangeRateType>BaseRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
        </Columns>
        <ConditionalWhere>function () { return dojo.string.substitute("SalesOrder.Id eq '${0}' and (ErpStatus ne '${1}' and ErpStatus ne '${2}' or ErpStatus eq null)", [Sage.Utility.getCurrentEntityId(), 'Deleted', 'Canceled']); }</ConditionalWhere>
        <Select>
          <string>UnitOfMeasure.Id</string>
          <string>UnitOfMeasure.Name</string>
          <string>Location.Name</string>
          <string>SalesOrder.CurrencyCode</string>
        </Select>
        <Include>
          <string>Product</string>
          <string>SalesOrder</string>
        </Include>
        <FeedCategory>InternalAppEntities</FeedCategory>
        <OnGetMappingId />
        <ParentRelationshipPropertyName>SalesOrder</ParentRelationshipPropertyName>
        <ChildRelationshipPropertyName>SalesOrder.SalesOrderItems</ChildRelationshipPropertyName>
        <OnDataChange>function (entity, attribute, oldValue, newValue, evt, grid) {
	 if (oldValue === newValue) {
	     return;
	 }
     var rate = 1;
     var contextService = Sage.Services.getService("ClientContextService");
     if (contextService != null) {
         if (contextService.containsKey("ExchangeRate")) {
             rate = contextService.getValue("ExchangeRate");
         }
     }
	 var oService = Sage.Services.getService("IntegrationContractService");
	 var isICEnabled = (typeof oService !== "undefined" &amp;&amp; oService != null &amp;&amp; oService.isIntegrationEnabled);
	 var isLocalSalesPriceEnabled = (oService &amp;&amp; oService.isSalesOrderCRMPricingEnabled);
	 var requestPricingAvailability = function (prod, quantity, unitOfMeasureId) {
	     var pricingOptions = {
	         resourceKind: 'salesOrders',
	         operationName: 'RequestPricingAvailability',
	         callback: function (pricingResponse) {
	             if (pricingResponse) {
	                 var request = pricingResponse.Children[0];
	                 if (request) {
	                     var errorProp = request.Properties['messageText'];
	                     var errorCode = request.Properties['ErrorCode'];
	                     if (!(errorProp || errorCode)) {	                        
							Sage.Utility.PricingAndAvailability.updateItemResponsePricing(pricingResponse, entity);
							evt.grid.updateDirty(evt.rowId, 'DocCalculatedPrice', entity['DocCalculatedPrice']);
							evt.grid.updateDirty(evt.rowId, 'DocExtendedPrice', entity['DocExtendedPrice']);
							evt.grid.updateDirty(evt.rowId, 'DocTotalAmount', entity['DocTotalAmount']);
							evt.grid.updateDirty(evt.rowId, 'SlxLocation', entity['SlxLocation']);
							grid.update(evt);
	                     }
	                 }
	             }
	         },
	         product: prod,
	         requestOptions: {
	             childEntityIds: prod.Product.$key,
	             childEntityName: 'Product',
	             itemEntityName: 'SalesOrderItem',
	             entityName: 'SalesOrder',
				 itemId: prod.$key,
				 itemQuantity: quantity,
	             entityId: Sage.Utility.getCurrentEntityId(),
	             serviceName: 'OrderLineTotal',
				 unitOfMeasureId: unitOfMeasureId,
				 autoSave: false
	         }
	     }
	     Sage.Utility.PricingAndAvailability.requestPricingAvailability(pricingOptions);
	 }
	switch (attribute) {
	    case 'Discount':
		if (entity.Price == 0) {
			entity.Discount = 0;
	            Sage.UI.Dialogs.showError(SalesOrderProductsResources.error_ZeroBasePrice);
		} else {
	            entity.CalculatedPrice = entity.Price - (entity.Price * newValue);
                entity.DocCalculatedPrice = entity.CalculatedPrice * rate;
		}
        entity.ExtendedPrice = entity.CalculatedPrice * entity.Quantity;
             entity.DocExtendedPrice = entity.ExtendedPrice * rate;
	        break;
	    case 'CalculatedPrice':
			 entity.Discount = entity.Price == 0 ? 0 : 1 - newValue / entity.Price;
			 entity.ExtendedPrice = newValue * entity.Quantity;
             entity.DocExtendedPrice = entity.ExtendedPrice * rate;			 
		     break;
	    case 'Quantity':
		if(entity.Quantity&gt;0){
			 if (isICEnabled &amp;&amp; entity.Product &amp;&amp; entity.Product.ErpConfiguredItem===false &amp;&amp; !isLocalSalesPriceEnabled) {
			 	requestPricingAvailability(entity, newValue);
			} else {
			 	entity.ExtendedPrice = entity.CalculatedPrice * newValue;
                entity.DocExtendedPrice = entity.ExtendedPrice * rate;
				entity.TotalAmount = entity.CalculatedPrice * newValue;
                entity.DocTotalAmount = entity.DocCalculatedPrice * newValue;
			}
			}
			break;
		case 'UnitOfMeasure':
            if (isICEnabled &amp;&amp; entity.Product &amp;&amp; entity.Product.ErpConfiguredItem===false &amp;&amp; !isLocalSalesPriceEnabled) {
                requestPricingAvailability(entity, entity.Quantity, newValue.$key);
            }
            break;
	    case 'Program':
        if (!entity.Product || typeof entity.Product.$key === 'undefined') {
            /* Custom product (FreeText). */
            entity.Program = null;
            return;
        }
        var sUrl = dojo.string.substitute("slxdata.ashx/slx/dynamic/-/productPrograms?select=Price&amp;where=Product.Id eq '${0}' and Program eq '${1}'&amp;format=json",
        [entity.Product.$key, escape(newValue)]);
        dojo.xhrGet({
            cache: false,
            preventCache: true,
            handleAs: 'json',
            url: sUrl,
			sync: true,
                 load: function (programPrice) {
                if (programPrice.$resources != null &amp;&amp; programPrice.$resources.length == 1) {
                    entity.Price = programPrice.$resources[0].Price;
                    entity.CalculatedPrice = entity.Price - (entity.Price * entity.Discount);
                         entity.DocCalculatedPrice = entity.CalculatedPrice * rate;
                    entity.ExtendedPrice = entity.CalculatedPrice * entity.Quantity;
                         entity.DocExtendedPrice = entity.ExtendedPrice * rate;
                }
            },
            data: {},
                 error: function (request, status, error) {
	                var sError = dojo.string.substitute(SalesOrderProductsResources.error_ExecutingRequest, [sUrl, request.statusText, request.status]);
                if (dojo.isString(request.responseText)) {
                    if ((request.responseText.indexOf("[", 0) == 0) &amp;&amp; (request.responseText.lastIndexOf("]") == request.responseText.length - 1)) {
                        var oSDataError = dojo.fromJson(request.responseText);
                        if (dojo.isArray(oSDataError)) {
	                            sError = dojo.string.substitute(SalesOrderProductsResources.error_ExecutingRequestExt
                            [sUrl, oSDataError[0].severity, oSDataError[0].sdataCode, oSDataError[0].message, oSDataError[0].applicationCode, request.statusText, request.status]);
                        }
                    }
                }
                Sage.UI.Dialogs.showError(sError);
            }
	        });
	        break;
	    }
}</OnDataChange>
        <OnAdd />
        <Tools>
          <SDataGridSaveTool>
            <Name>Save</Name>
            <Image>[Localization!Global_Images:Save_16x16]</Image>
            <DisplayInInsert>false</DisplayInInsert>
            <MergePosition>Default</MergePosition>
            <MergeControlId />
            <OnClick>function () { if (Sage.Utility.getModeId() !== 'insert') { __doPostBack('MainContent', ''); } }</OnClick>
            <StyleScheme />
            <AppliedSecurity />
          </SDataGridSaveTool>
          <SDataGridAddRelationTool>
            <Name>Relate</Name>
            <Image />
            <DisplayInInsert>true</DisplayInInsert>
            <MergePosition>Default</MergePosition>
            <MergeControlId />
            <OnClick>//default add relationship behavior</OnClick>
            <StyleScheme />
            <AppliedSecurity />
            <LookupButton>
              <Column>0</Column>
              <Row>0</Row>
              <HotKey>0</HotKey>
              <TabIndex>0</TabIndex>
              <ControlId>luProduct</ControlId>
              <DataBindings />
              <ControlLabelPlacement>left</ControlLabelPlacement>
              <ExtendedProperties />
              <CaptionAlignment>left</CaptionAlignment>
              <StyleScheme />
              <OnChangeAction>
                <ResourceKey>db915983-f6ce-4e4f-99a0-a1a332a6b7cd</ResourceKey>
                <Action typeName="Sage.Platform.QuickForms.ActionItems.NoActionActionItem, Sage.Platform.QuickForms">
                  <NoActionActionItem>
                    <MethodName />
                  </NoActionActionItem>
                </Action>
                <IsDialogCloseAction>False</IsDialogCloseAction>
                <RunOnEveryRePaint>False</RunOnEveryRePaint>
                <DialogActionResult>NoResult</DialogActionResult>
                <PerformsUpdate>False</PerformsUpdate>
                <AppliedSecurity />
                <RefreshData>False</RefreshData>
              </OnChangeAction>
              <Required>false</Required>
              <LookupImage>[Localization!Global_Images:add_products_16x16]</LookupImage>
              <LookupDialogWidth xsi:nil="true" />
              <LookupDialogHeight xsi:nil="true" />
              <LookupDisplayMode>ButtonOnly</LookupDisplayMode>
              <LookupBindingMode>Object</LookupBindingMode>
              <LookupResultValue xsi:type="xsd:string" />
              <AddEmptyListItem>false</AddEmptyListItem>
              <AllowClearingResult>false</AllowClearingResult>
              <AppendStringValues>false</AppendStringValues>
              <OverrideSeedOnSearch>false</OverrideSeedOnSearch>
              <LookupEntityName>Product</LookupEntityName>
              <LookupEntityTypeName>Sage.Entity.Interfaces.IProduct, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null</LookupEntityTypeName>
              <AutoPostBack>false</AutoPostBack>
              <EnableHyperLinking>false</EnableHyperLinking>
              <InitializeLookup>false</InitializeLookup>
              <LookupProperties>
                <LookupProperty>
                  <PropertyName>Name</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>Name</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>true</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <PickListName />
                  <IsSortable>true</IsSortable>
                  <HideCondition />
                </LookupProperty>
                <LookupProperty>
                  <PropertyName>Family</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>Family</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>true</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <PickListName />
                  <IsSortable>true</IsSortable>
                  <HideCondition />
                </LookupProperty>
                <LookupProperty>
                  <PropertyName>Status</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>Status</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>true</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <PickListName />
                  <IsSortable>true</IsSortable>
                  <HideCondition />
                </LookupProperty>
                <LookupProperty>
                  <PropertyName>ActualId</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>SKU</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>true</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <PickListName />
                  <IsSortable>true</IsSortable>
                  <HideCondition />
                </LookupProperty>
                <LookupProperty>
                  <PropertyName>ErpConfiguredItem</PropertyName>
                  <PropertyType>System.Boolean</PropertyType>
                  <PropertyHeader>Configured Item</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>false</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <PickListName />
                  <IsSortable>false</IsSortable>
                  <HideCondition>function () {
    return !isIntegrationContractEnabled();
}</HideCondition>
                </LookupProperty>
                <LookupProperty>
                  <PropertyName>UnitOfMeasure.Name</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>Unit Of Measure</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>false</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <PickListName />
                  <IsSortable>true</IsSortable>
                  <HideCondition>function()
{  
  return !isBackOfficeIntegrationEnabled(); 
}</HideCondition>
                </LookupProperty>
                <LookupProperty>
                  <PropertyName>ErpLogicalId</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>ERP Logical ID</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>false</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <PickListName />
                  <IsSortable>true</IsSortable>
                  <HideCondition>function () {
    return !isIntegrationContractEnabled();
}</HideCondition>
                </LookupProperty>
                <LookupProperty>
                  <PropertyName>ErpAccountingEntityId</PropertyName>
                  <PropertyType>System.String</PropertyType>
                  <PropertyHeader>Accounting Entity</PropertyHeader>
                  <PropertyFormat>None</PropertyFormat>
                  <PropertyFormatString />
                  <UseAsResult>false</UseAsResult>
                  <ExcludeFromFilters>false</ExcludeFromFilters>
                  <PickListName />
                  <IsSortable>true</IsSortable>
                  <HideCondition>function () {
    return !isIntegrationContractEnabled();
}</HideCondition>
                </LookupProperty>
              </LookupProperties>
              <LookupPreFilters />
              <LookupSelectionMode>Multi</LookupSelectionMode>
              <OnSelection>function (items) {
    if (!items.length) return;
    var product;
    var item;
    var salesOrderId = Sage.Utility.getCurrentEntityId();
    var grid = dijit.byId('SalesOrderProductsgrdItems');
    if (grid &amp;&amp; grid.store) {
        var oService = Sage.Services.getService("IntegrationContractService");
        var isICEnabled = (typeof oService !== "undefined" &amp;&amp; oService != null &amp;&amp; oService.isIntegrationEnabled);
        var recordCount = grid.rowCount;
        var iCurrentCount = 0;
        var iTotalCount = 0;
        var arrItems = [];
        grid.store.newItem({
            onComplete: function (salesOrderItem) {
                var productIds = '';
                for (i = 0; i &lt; items.length; i += 1) {
                    var quantity = 1;
                    item = items[i];
                    if (item.ProdPackageKitType === 'PKG') {
                        for (var j = 0; j &lt; item.PackageKitChildViews.$resources.length; j++) {
                            var prod = item.PackageKitChildViews.$resources[j];
                            prod.$key = item.PackageKitChildViews.$resources[j].ProductId;
                            if (productIds != '')
                                productIds = productIds + ',' + prod.$key;
                            else
                                productIds = prod.$key;
                        }
                    } else {
                        productIds = productIds != '' ? productIds + ',' + item.$key : item.$key;
                    }
                }
                var addProduct = function (prod, quantity, exchangeRate, pricingResponse) {
                    var select = "select=Id,ActualId,CommodityType,Description,Family,Name,UnitOfMeasure/Id,UnitOfMeasure/Name,";
                    select += "ProductProgram/Program,ProductProgram/Price,ProductProgram/DefaultProgram";
                    var where = dojo.string.substitute("where=Id eq '${0}'", [prod.$key]);
                    var sUrl = dojo.string.substitute("slxdata.ashx/slx/dynamic/-/products?${0}&amp;${1}&amp;format=json&amp;_t=${2}",
                    [select, where, (new Date().getTime().toString())]);
                    $.ajax({
                        type: "GET",
                        contentType: "application/json",
                        url: sUrl,
                        dataType: 'json',
                        success: function (prodResponse) {
                            //below would indicate that the selected product did not meet the initial condition of the lookup, occurs when 
                            //filtering on lookup control. To me this would indicate a defect in the conditional lookup control
                            if (prodResponse.$resources == null || prodResponse.$resources.length == 0) {
                                alert("invalid product");
                            } else {
                                if (prodResponse.$resources != null &amp;&amp; prodResponse.$resources.length &gt; 0) {
                                    for (var x = 0; x &lt; prodResponse.$resources.length; x++) {
                                        var newEntity = {};
                                        product = prodResponse.$resources[x];
                                        //Insert mode check
                                        if (Sage.Utility.getModeId() === 'insert') {
                                            product.$cacheID = new Date().getTime();
                                        } else {
                                            salesOrderItem.SalesOrder = { $key: salesOrderId };
                                        }
                                        salesOrderItem.Product = {};
                                        delete product.index;
                                        Sage.Utility.extend(salesOrderItem.Product, product);
                                        salesOrderItem.ActualId = product.ActualId;
                                        salesOrderItem.CommodityType = product.CommodityType;
                                        salesOrderItem.Discount = 0;
                                        salesOrderItem.Family = product.Family;
                                        salesOrderItem.ProductName = product.Name;
                                        salesOrderItem.Quantity = quantity;
                                        salesOrderItem.LineNumber = recordCount += 1;
                                        var price = 0;
                                        product.Price = 0; // Required because of Sage.Utility.extend().
                                        salesOrderItem.UnitOfMeasure = product.UnitOfMeasure;
                                        salesOrderItem.Price = 0;
                                        salesOrderItem.ExtendedPrice = 0;
                                        salesOrderItem.DocExtendedPrice = 0;
                                        salesOrderItem.CalculatedPrice = 0;
                                        salesOrderItem.DocCalculatedPrice = 0;
                                        salesOrderItem.Program = null;
                                        if (prodResponse.$resources[x].ProductProgram != null &amp;&amp;
                                            prodResponse.$resources[x].ProductProgram.$resources != null &amp;&amp;
                                            prodResponse.$resources[x].ProductProgram.$resources.length &gt; 0) {
                                            for (var j = 0; j &lt; prodResponse.$resources[x].ProductProgram.$resources.length; j++) {
                                                /* Grab the price for the default program. */
                                                if (prodResponse.$resources[x].ProductProgram.$resources[j].DefaultProgram) {
                                                    if (prodResponse.$resources[x].ProductProgram.$resources[j].Price != null) {
                                                        price = prodResponse.$resources[x].ProductProgram.$resources[j].Price;
                                                    }
                                                    product.Price = price; // Required because of Sage.Utility.extend().
                                                    salesOrderItem.CalculatedPrice = price;
                                                    salesOrderItem.DocCalculatedPrice = price * exchangeRate;
                                                    salesOrderItem.ExtendedPrice = price;
                                                    salesOrderItem.DocExtendedPrice = salesOrderItem.DocCalculatedPrice;
                                                    salesOrderItem.Program = prodResponse.$resources[x].ProductProgram.$resources[j].Program;
                                                    break;
                                                }
                                            }
                                        }
                                        delete product.$key;
                                        delete product.$name;
                                        delete product.$url;
                                        Sage.Utility.extend(true, newEntity, salesOrderItem, product);
                                        if (pricingResponse) {
                                            var request = pricingResponse.Children[0];
                                            if (request) {
                                                var errorProp = request.Properties['messageText'];
                                                var errorCode = request.Properties['ErrorCode'];
                                                if (errorProp || errorCode || errorProp == '') {
													//if(errorProp != '')
													//	Sage.UI.Dialogs.showError(dojo.string.substitute(SalesOrderProductsResources.error_PricingRequest, [errorProp]));
                                                } else {
                                                   newEntity = Sage.Utility.PricingAndAvailability.updateItemResponsePricing(pricingResponse, newEntity);
                                               	}
                                            }
                                        }
                                        arrItems.push(newEntity);
                                        iCurrentCount++;
                                        if (iCurrentCount === iTotalCount) {
                                            grid.createItems(arrItems, function () {
                                                if (Sage.Utility.getModeId() !== 'insert') {
                                                    __doPostBack("MainContent", "");
                                                }
                                            });
                                        }
                                    }
                                } else {
                                    iTotalCount--;
                                    if (iCurrentCount === iTotalCount) {
                                        grid.createItems(arrItems, function () {
                                            if (Sage.Utility.getModeId() !== 'insert') {
                                                __doPostBack("MainContent", "");
                                            }
                                        });
                                    }
                                }
                            }
                        },
                        data: {},
                        error: function (request, status, error) {
                            if (iTotalCount &gt; 0) {
                                iTotalCount--;
                            }
                            var sError = dojo.string.substitute(SalesOrderProductsResources.error_ExecutingRequest, [sUrl, request.statusText, request.status]);
                            if (dojo.isString(request.responseText)) {
                                if ((request.responseText.indexOf("[", 0) == 0) &amp;&amp; (request.responseText.lastIndexOf("]") == request.responseText.length - 1)) {
                                    var oSDataError = dojo.fromJson(request.responseText);
                                    if (dojo.isArray(oSDataError)) {
                                        sError = dojo.string.substitute(SalesOrderProductsResources.error_ExecutingRequestExt,
                                        [sUrl, oSDataError[0].severity, oSDataError[0].sdataCode, oSDataError[0].message, oSDataError[0].applicationCode, request.statusText, request.status]);
                                    }
                                }
                            }
                            Sage.UI.Dialogs.showError(sError);
                        }
                    });
                }
                var getExchangeRate = function () {
                    var rate = 1;
                    var contextService = Sage.Services.getService("ClientContextService");
                    if (contextService != null) {
                        if (contextService.containsKey("ExchangeRate")) {
                            rate = contextService.getValue("ExchangeRate");
                        }
                    }
                    return rate;
                }
                var getTotalCount = function () {
                    var iResult = 0;
                    var i;
                    for (i = 0; i &lt; items.length; i += 1) {
                        item = items[i];
                        if (item.ProdPackageKitType === 'PKG') {
                            for (var j = 0; j &lt; item.PackageKitChildViews.$resources.length; j++) {
                                iResult++;
                            }
                        } else {
                            iResult++;
                        }
                    }
                    return iResult;
                }
                var requestPricingAvailability = function (prod, quantity, exchangeRate) {
                    var pricingOptions = {
                        resourceKind: 'salesOrders',
                        operationName: 'RequestPricingAvailability',
                        callback: function (pricingResponse) {
                            addProduct(prod, quantity, exchangeRate, pricingResponse);
                        },
                        product: prod,
                        quantity: quantity,
                        exchangeRate: exchangeRate,
                        requestOptions: {
							childEntityIds: productIds,
							childEntityName: 'Product',
							itemEntityName: 'SalesOrderItem',
							entityName: 'SalesOrder',
							entityId: salesOrderId,
							serviceName: 'OrderLineTotal',
							quantity: 1 ,
							unitOfMeasureId: prod.UnitOfMeasure == null ?  "" : prod.UnitOfMeasure.$key
                        }
                    }
                    Sage.Utility.PricingAndAvailability.requestPricingAvailability(pricingOptions);
                }
                iTotalCount = getTotalCount();
                var exchangeRate = getExchangeRate();
                var iCount = 0;
                var i;
                for (i = 0; i &lt; items.length; i += 1) {
                    var qty = 1;
                    item = items[i];
                    if (item.ProdPackageKitType === 'PKG') {
                        for (var j = 0; j &lt; item.PackageKitChildViews.$resources.length; j++) {
                            var prod = item.PackageKitChildViews.$resources[j];
                            prod.$key = item.PackageKitChildViews.$resources[j].ProductId;
                            if (prod.Quantity != null) {
                                qty = prod.Quantity;
                            }
                            iCount++;
                            addProduct(prod, qty, exchangeRate);
                        }
                    } else {
                        iCount++;
                        addProduct(item, qty, exchangeRate);
                    }
                }
            }
        });
    }
}</OnSelection>
              <OnClose>function(selectedItems) {
	var service = Sage.Services.getService('IntegrationContractService');
	if (!service.isBackOfficeIntegrationEnabled || service.isSalesOrderCRMPricingEnabled || selectedItems &amp;&amp; selectedItems.length === 0) {
	    return;
	}
	var requestOptions = {
	    entityName: 'SalesOrder',
	    entityId: Sage.Utility.getCurrentEntityId(),
	    selectedItems: selectedItems,
	    resourceKind: 'salesOrders',
	    itemEntityName: 'SalesOrderItem',
	    serviceName: 'OrderLineTotal',
		isGridRefresh:true,
		AutoSave:true
	};
	Sage.Utility.PricingAndAvailability.doPricingAvailability(requestOptions);
}</OnClose>
              <AdditionalSelectFields>
                <string>ProductId</string>
                <string>ProdPackageKitType</string>
                <string>CommodityType</string>
                <string>Program</string>
                <string>Quantity</string>
                <string>ActiveFlag</string>
                <string>UnitOfMeasure.Name</string>
              </AdditionalSelectFields>
              <ChildEntity>PackageKitChildViews</ChildEntity>
              <LookupResourceName>ProdPackageKitView</LookupResourceName>
              <ConditionalWhere>function() { return dojo.string.substitute("(ErpStatus ne 'Deleted' or ErpStatus eq null) and (Status ne '${0}' or Status eq null)", [SalesOrderProductsResources.productStatus_Discontinued]); }</ConditionalWhere>
              <ConditionalShow />
            </LookupButton>
          </SDataGridAddRelationTool>
          <SDataGridDeleteTool>
            <Name>Delete</Name>
            <Image>[Localization!Global_Images:Delete_16x16]</Image>
            <DisplayInInsert>true</DisplayInInsert>
            <MergePosition>After</MergePosition>
            <MergeControlId>btnRenumber</MergeControlId>
            <OnClick>function () { if (Sage.Utility.getModeId() !== 'insert') { __doPostBack('MainContent', ''); } }</OnClick>
            <StyleScheme />
            <AppliedSecurity />
          </SDataGridDeleteTool>
          <SDataGridCancelTool>
            <Name>Cancel</Name>
            <Image>[Localization!Global_Images:Reset_16x16]</Image>
            <DisplayInInsert>false</DisplayInInsert>
            <MergePosition>After</MergePosition>
            <MergeControlId>btnRenumber</MergeControlId>
            <OnClick>//default Cancel behavior</OnClick>
            <StyleScheme />
            <AppliedSecurity />
          </SDataGridCancelTool>
        </Tools>
      </QFSDataGrid>
    </Control>
  </Controls>
  <ToolControls>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFElementSpacer, Sage.Platform.QuickForms">
      <QFElementSpacer>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId />
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
      </QFElementSpacer>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFElementSpacer, Sage.Platform.QuickForms">
      <QFElementSpacer>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId />
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
      </QFElementSpacer>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFButton, Sage.Platform.QuickForms">
      <QFButton>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>btnAddCustomProduct</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <ButtonType>Icon</ButtonType>
        <Image>[Localization!Global_Images:add_custom_product_16x16]</Image>
        <OnClientClick />
        <OnClickAction>
          <ResourceKey>btnAddCustomProduct</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.CSharpSnippetActionItem, Sage.Platform.QuickForms">
            <CSharpSnippetActionItem>
              <MethodName>btnAddCustomProduct_ClickAction</MethodName>
              <CSharpCodeSnippet>if (DialogService != null) {
	DialogService.SetSpecs(400, 950, "EditSalesOrderItem", GetLocalResourceObject("7a95abab-aa0a-4abb-98d6-363ab585457d.DialogTitleOverride").ToString() );
	DialogService.EntityType = typeof(ISalesOrderItem);
	DialogService.DialogParameters["AdHocProduct"] = true;
	DialogService.ShowDialog();
}</CSharpCodeSnippet>
            </CSharpSnippetActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>False</RefreshData>
        </OnClickAction>
      </QFButton>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFButton, Sage.Platform.QuickForms">
      <QFButton>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>btnRenumber</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <ButtonType>Icon</ButtonType>
        <Image>[Localization!Global_Images:renumber_16x16]</Image>
        <OnClientClick />
        <OnClickAction>
          <ResourceKey>btnRenumber</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.BusinessRuleActionItem, Sage.Platform.QuickForms">
            <BusinessRuleActionItem>
              <BusinessRule>ReAssignLineNumbers</BusinessRule>
              <Object>SalesOrder</Object>
              <Parameters />
              <PassResultsToNextAction>False</PassResultsToNextAction>
              <OnComplete typeName="Sage.Platform.QuickForms.ActionItems.RefreshDataAction, Sage.Platform.QuickForms">
                <RefreshDataAction>
                  <MethodName>btnRenumber_ClickActionBRC</MethodName>
                </RefreshDataAction>
              </OnComplete>
            </BusinessRuleActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>True</RefreshData>
        </OnClickAction>
      </QFButton>
    </Control>
  </ToolControls>
  <Columns>
    <ColumnStyle>
      <SizeType>Percent</SizeType>
      <Width>100</Width>
    </ColumnStyle>
  </Columns>
  <Rows>
    <RowStyle>
      <SizeType>Absolute</SizeType>
      <Height>35</Height>
    </RowStyle>
  </Rows>
  <Description />
  <UseEntityNameAsTitle>false</UseEntityNameAsTitle>
  <EntityTypeName>ISalesOrder</EntityTypeName>
  <DefaultNamespace>Sage.Entity.Interfaces</DefaultNamespace>
  <AssemblyName>Sage.Entity.Interfaces</AssemblyName>
</QuickForm>