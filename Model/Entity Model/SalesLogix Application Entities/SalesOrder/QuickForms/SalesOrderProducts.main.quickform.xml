<?xml version="1.0"?>
<QuickForm xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="90e12bf4-fd63-47e4-b713-d69cfd0d2e09" DefinitionType="Sage.Platform.QuickForms.QuickFormMainDetailViewDefinition, Sage.Platform.QuickForms">
  <ActiveControl />
  <ImagePath />
  <LoadActions>
    <FormActionDefinition>
      <ResourceKey>bf48998d-0a7a-4649-9b73-71b442ebf292</ResourceKey>
      <Action typeName="Sage.Platform.QuickForms.ActionItems.CSharpSnippetActionItem, Sage.Platform.QuickForms">
        <CSharpSnippetActionItem>
          <MethodName>quickformload0</MethodName>
          <CSharpCodeSnippet>Sage.Entity.Interfaces.ISalesOrder salesOrder = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;
if (salesOrder != null)
{
    Sage.Platform.SData.IAppIdMappingService mappingService =
        Sage.Platform.Application.ApplicationContext.Current.Services.Get&lt;Sage.Platform.SData.IAppIdMappingService&gt;(
            true);
    //if this is a Sales Order that synced from the accounting system or the Sales Order has been submitted then we disable it
    bool isIntegrated = mappingService.IsIntegrationEnabled();
	if (isIntegrated)
	{
		var clientContextService = PageWorkItem.Services.Get&lt;Sage.Platform.WebPortal.Services.ClientContextService&gt;();
		if (clientContextService != null)
		{
			// OperatingCompany
			if (clientContextService.CurrentContext.ContainsKey("OperatingCompany"))
			{
                if (salesOrder.OperatingCompany != null)
                {
				    clientContextService.CurrentContext["OperatingCompany"] = salesOrder.OperatingCompany.Id.ToString();
                }
                else
                {
                    clientContextService.CurrentContext.Remove("OperatingCompany");
                }
			}
			else
			{
                if (salesOrder.OperatingCompany != null)
                {
                    clientContextService.CurrentContext.Add("OperatingCompany", salesOrder.OperatingCompany.Id.ToString());
                }
			}
			
			// SlxPriceList
			if (clientContextService.CurrentContext.ContainsKey("SlxPriceList"))
			{
                if (salesOrder.SlxPriceList != null)
                {
				    clientContextService.CurrentContext["SlxPriceList"] = salesOrder.SlxPriceList.Id.ToString();
                }
                else
                {
                    clientContextService.CurrentContext.Remove("SlxPriceList");
                }
			}
			else
			{
                if (salesOrder.SlxPriceList != null)
                {
                    clientContextService.CurrentContext.Add("SlxPriceList", salesOrder.SlxPriceList.Id.ToString());
                }
			}			

			// GlobalSyncId			
			if (clientContextService.CurrentContext.ContainsKey("GlobalSyncId"))
			{
				clientContextService.CurrentContext["GlobalSyncId"] = salesOrder.GlobalSyncId.ToString();
			}
			else
			{
				clientContextService.CurrentContext.Add("GlobalSyncId", salesOrder.GlobalSyncId.ToString());
			}
			
			// SalesOrderStatus
            if (clientContextService.CurrentContext.ContainsKey("SalesOrderStatus"))
            {
                if (salesOrder.ERPSalesOrder != null &amp;&amp; !String.IsNullOrEmpty(salesOrder.ERPSalesOrder.ERPStatus))
                {
                    clientContextService.CurrentContext["SalesOrderStatus"] = salesOrder.ERPSalesOrder.ERPStatus;
                }
                else
                {
                    clientContextService.CurrentContext.Remove("SalesOrderStatus");
                }
            }
            else
            {
                if (salesOrder.ERPSalesOrder != null)
                {
                    clientContextService.CurrentContext.Add("SalesOrderStatus",
                                                            !String.IsNullOrEmpty(salesOrder.ERPSalesOrder.ERPStatus)
                                                                ? salesOrder.ERPSalesOrder.ERPStatus
                                                                : String.Empty);
                }
            }
        }
	}
    bool isOpen = false;
    if (!String.IsNullOrEmpty(salesOrder.ERPSalesOrder.ERPStatus))
    {
        isOpen = (salesOrder.ERPSalesOrder.ERPStatus.Equals(
            GetLocalResourceObject("erpStatus_Open").ToString()) ||
            salesOrder.ERPSalesOrder.ERPStatus.Equals(GetLocalResourceObject("erpStatus_Rejected").ToString()));
    }
    bool erpSalesOrder = (mappingService.IsIntegrationEnabled() &amp;&amp; (salesOrder.GlobalSyncId.HasValue &amp;&amp; !isOpen));
        
    bool lockPriceAccess = RoleSecurityService.HasAccess("Entities/SalesOrders/LockPricing");
    bool closed = false;
    if (salesOrder.Status != null)
    {
        closed = (salesOrder.Status.ToUpper().Equals(GetLocalResourceObject("SalesOrderStatus_Closed").ToString().ToUpper()) ||
            salesOrder.Status.ToUpper().Equals(GetLocalResourceObject("SalesOrderStatus_Transmitted").ToString().ToUpper()));
    }
    // btnAddCustomProduct.Visible = btnAddCustomProduct.Visible &amp;&amp; !closed &amp;&amp; !erpSalesOrder;
    btnAddCustomProduct.Visible = false;
	btnLockAll.Visible = !closed &amp;&amp; isIntegrated &amp;&amp; lockPriceAccess &amp;&amp; !erpSalesOrder;
    btnUnlockAll.Visible = !closed &amp;&amp; isIntegrated &amp;&amp; lockPriceAccess &amp;&amp; !erpSalesOrder;
    btnRenumber.Visible = !closed &amp;&amp; !erpSalesOrder &amp;&amp; salesOrder.Id != null;
}</CSharpCodeSnippet>
        </CSharpSnippetActionItem>
      </Action>
      <IsDialogCloseAction>False</IsDialogCloseAction>
      <RunOnEveryRePaint>True</RunOnEveryRePaint>
      <DialogActionResult>NoResult</DialogActionResult>
      <PerformsUpdate>False</PerformsUpdate>
      <AppliedSecurity />
      <RefreshData>False</RefreshData>
    </FormActionDefinition>
    <FormActionDefinition>
      <ResourceKey>90791539-c253-4402-a54f-0860cfbe893a</ResourceKey>
      <Action typeName="Sage.Platform.QuickForms.ActionItems.CodeSnippetActionItem, Sage.Platform.QuickForms">
        <CodeSnippetActionItem methodId="a9a32432-7fbd-4971-bde0-0740a2aadcb4">
          <MethodName>quickformload1</MethodName>
        </CodeSnippetActionItem>
      </Action>
      <IsDialogCloseAction>False</IsDialogCloseAction>
      <RunOnEveryRePaint>False</RunOnEveryRePaint>
      <DialogActionResult>NoResult</DialogActionResult>
      <PerformsUpdate>False</PerformsUpdate>
      <AppliedSecurity />
      <RefreshData>False</RefreshData>
    </FormActionDefinition>
    <FormActionDefinition>
      <ResourceKey>172c582e-2c20-41c2-a59c-6bc66503b4ee</ResourceKey>
      <Action typeName="Sage.Platform.QuickForms.ActionItems.CSharpSnippetActionItem, Sage.Platform.QuickForms">
        <CSharpSnippetActionItem>
          <MethodName>quickformload2</MethodName>
          <CSharpCodeSnippet>//this is a placeholder for aa
}

protected override void OnLoad(EventArgs e) {
    base.OnLoad(e);
    AddGridFilters();
}

protected void AddGridFilters() {
    //Add Dynamic Grid filters
    //Modified 2014-1-8 PG
    //On load of the page query the products and add a filter checkbox for each distinct family

    //Add hidden Field
    //HiddenField hid = new HiddenField();
    //hid.ID = "hidCheckedFilters";
    //hid.ClientIDMode = System.Web.UI.ClientIDMode.Static;
    //QFControlsList.Controls.Add(hid);

    //Add filter title
    Label lbl = new Label();
    lbl.Text = "Filters: ";
    lbl.ID = "lblFilter";
    QFControlsList.Controls.Add(lbl);

    Sage.Entity.Interfaces.ISalesOrder salesOrder = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrder;
    if (salesOrder != null) {
        var families = (from i in salesOrder.SalesOrderItems
                        orderby i.Family
                        select i.Family).Distinct();

        int j = 0;
        foreach (string f in families) {

            //create a checkbox               
            SLXCheckBox chk = new SLXCheckBox();
            chk.ID = "chkFamily" + j;
            chk.Checked = false;
            chk.Text = f;
            chk.CssClass = "slxlabel alignleft checkboxRight";			
            chk.AutoPostBack = true;
            chk.CheckedChanged += new EventHandler(CheckBox_CheckedChanged);
            QFControlsList.Controls.Add(chk);
            j++;
        }
        //fill the hidden field with default values
        UpdateFilterList();
    }
    //Modified 2014-1-8 PG

}
protected void CheckBox_CheckedChanged(object sender, EventArgs e) {
    UpdateFilterList();
}

protected void UpdateFilterList() {
        //Update the hidden box for each of the checked filters
        hidCheckedFilters.Value = "";        
        foreach (Control ctrl in QFControlsList.Controls) {
            if (ctrl.GetType() == typeof(SLXCheckBox)) {
                if ((ctrl as SLXCheckBox).Checked == true) {
                    hidCheckedFilters.Value += "\"" +(ctrl as SLXCheckBox).Text + "\", ";                    
                }
            }
        }
        if (hidCheckedFilters.Value.Length &gt; 2) {
            //Remove the last 2 characters
            hidCheckedFilters.Value = hidCheckedFilters.Value.Remove(hidCheckedFilters.Value.Length - 2);            
        }</CSharpCodeSnippet>
        </CSharpSnippetActionItem>
      </Action>
      <IsDialogCloseAction>False</IsDialogCloseAction>
      <RunOnEveryRePaint>False</RunOnEveryRePaint>
      <DialogActionResult>NoResult</DialogActionResult>
      <PerformsUpdate>False</PerformsUpdate>
      <AppliedSecurity />
      <RefreshData>False</RefreshData>
    </FormActionDefinition>
  </LoadActions>
  <Name>SalesOrderProducts</Name>
  <ClientScriptIncludes />
  <ClientResourceKeys />
  <ExtendedProperties />
  <HelpFile />
  <ReadOnly>false</ReadOnly>
  <GeneratePrintView>false</GeneratePrintView>
  <Controls>
    <Control typeName="Sage.Platform.QuickForms.QFControls.QFControlsList, Sage.Platform.QuickForms.QFControls">
      <QFControlsList>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>QFControlsList</ControlId>
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <Caption />
        <Controls>
          <ControlsCollection />
        </Controls>
      </QFControlsList>
    </Control>
    <Control typeName="Sage.SalesLogix.QuickForms.QFControls.SDataGrid.QFSDataGrid, Sage.SalesLogix.QuickForms.QFControls">
      <QFSDataGrid>
        <Column>0</Column>
        <Row>1</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>grdItems</ControlId>
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <GenerateMember>false</GenerateMember>
        <ReadOnlyCondition>function() {
    if (isIntegrationContractEnabled()) {
        var clientContextService = Sage.Services.getService("ClientContextService");
        if (clientContextService) {
            if (clientContextService.containsKey("SalesOrderStatus") &amp;&amp; clientContextService.containsKey("GlobalSyncId")) {
                var status = clientContextService.getValue("SalesOrderStatus");
                var globalSyncId = clientContextService.getValue("GlobalSyncId");
                if (globalSyncId != "" &amp;&amp; (status != "Open" || status != "Rejected")) { 
                    return true;
                }
            }
        }
    }
    return false;
}</ReadOnlyCondition>
        <AppliedSecurity />
        <RelateToPropertyName>SalesOrderItems</RelateToPropertyName>
        <PreviewField />
        <ResourceKind>
          <Name>salesOrderItems</Name>
          <GetPredicate />
        </ResourceKind>
        <PathSegments />
        <PageSize>1000</PageSize>
        <Columns>
          <QFSDataEditCol>
            <StyleScheme />
            <DataField>Id</DataField>
            <ColumnId>a8c6d9fd-1bde-4d02-b2a8-f56adc076935</ColumnId>
            <HorizontalAlignment>center</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>false</IsSortable>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <DialogSpecs>
              <SmartPart>EditSalesOrderItem</SmartPart>
              <Height>800</Height>
              <Width>600</Width>
              <Top>0</Top>
              <Left>0</Left>
              <EntityType>SalesOrderItem</EntityType>
              <ResourceKey>f842ee53-0b9f-43c7-858c-57afa8508f76</ResourceKey>
              <CenterDialog>True</CenterDialog>
            </DialogSpecs>
            <AppliedSecurity>Entities/SalesOrder/Edit</AppliedSecurity>
            <HideCondition>function () {
    if (Sage.Utility.getModeId() === 'insert') {
        return true;
    }
    return isIntegrationContractEnabled();
}</HideCondition>
            <Width>4</Width>
          </QFSDataEditCol>
          <QFSDataEditCol>
            <StyleScheme />
            <DataField>Id</DataField>
            <ColumnId>3160cbc2-c14d-4e58-94c9-5277e17b3951</ColumnId>
            <HorizontalAlignment>center</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>false</IsSortable>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <DialogSpecs>
              <SmartPart>ICEditSalesOrderItem</SmartPart>
              <Height>700</Height>
              <Width>700</Width>
              <Top>0</Top>
              <Left>0</Left>
              <EntityType>SalesOrderItem</EntityType>
              <ResourceKey>0475f9ec-f5ca-4fbd-9241-6d93fbcbdaf7</ResourceKey>
              <CenterDialog>True</CenterDialog>
            </DialogSpecs>
            <AppliedSecurity>Entities/SalesOrder/Edit</AppliedSecurity>
            <HideCondition>function () {
    if (Sage.Utility.getModeId() === 'insert') {
        return true;
    }
    return !isIntegrationContractEnabled();
}</HideCondition>
            <Width>4</Width>
          </QFSDataEditCol>
          <QFSDataCheckBoxCol>
            <StyleScheme />
            <DataField>ItemLocked</DataField>
            <ColumnId>eae77157-0570-48d4-bd9a-d78df7b84496</ColumnId>
            <HorizontalAlignment>center</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>false</IsSortable>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition>function () {
    return !isIntegrationContractEnabled();
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFSDataCheckBoxCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>LineNumber</DataField>
            <ColumnId>530b7cdb-cef1-4e94-a46a-cf8d931ff779</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>LineNumber</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>3</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>Quantity</DataField>
            <ColumnId>913de698-8761-4e66-960a-5cc960b7aeda</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Quantity</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition />
            <Width>3</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>ActualID</DataField>
            <ColumnId>f405b064-c26a-414b-86b3-855a47ace2a4</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>ActualID</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>5</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>UPC</DataField>
            <ColumnId>718d1e2f-b158-47d8-958d-732c16c58a3e</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>UPC</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>8</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>ProductName</DataField>
            <ColumnId>0c39de35-d246-4c4b-a1fa-57a0a9be41c6</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>ProductName</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>15</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFSDataLookupCol>
            <StyleScheme />
            <DataField>Program</DataField>
            <ColumnId>a74f322c-ebd9-49d4-ad41-3bcd939e8b41</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Program</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition>function () {
    return true; // isIntegrationContractEnabled();
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <SeedOnRowEntity>false</SeedOnRowEntity>
            <SeedOnRelatedEntity>Product</SeedOnRelatedEntity>
            <ConditionalWhere />
            <ResourceKind>productPrograms</ResourceKind>
            <LookupBindingMode>String</LookupBindingMode>
            <LookupDisplayProperty>Program</LookupDisplayProperty>
          </QFSDataLookupCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>Price</DataField>
            <ColumnId>3ef53358-80dd-4e3f-99fb-355cb397a797</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Price</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>4</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode />
            <ExchangeRate />
            <ExchangeRateType>BaseRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataNumericCol>
            <StyleScheme />
            <DataField>Discount</DataField>
            <ColumnId>983c7b9b-3c12-48e3-add2-73ff8cd065c2</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Discount</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>4</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <DecimalDigits>
              <DecimalDigits>2</DecimalDigits>
              <Strict>false</Strict>
            </DecimalDigits>
            <FormatType>Percent</FormatType>
          </QFSDataNumericCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>CalculatedPrice</DataField>
            <ColumnId>5cd443a0-928c-44a2-86f2-a4246f8223c7</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>CalculatedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>true</IsEditable>
            <HideCondition />
            <Width>4</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode />
            <ExchangeRate />
            <ExchangeRateType>BaseRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>CalculatedPrice</DataField>
            <ColumnId>28d57a8b-13ca-47c0-b41e-d969ed17dc28</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>CalculatedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
    return !isMultiCurrencyEnabled();
}</HideCondition>
            <Width>4</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode>SalesOrder.CurrencyCode</CurrentCode>
            <ExchangeRate>SalesOrder.ExchangeRate</ExchangeRate>
            <ExchangeRateType>EntityRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>Product.Unit</DataField>
            <ColumnId>89dde4ba-017f-4b48-a475-1dbff0490c1b</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Product.Unit</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>4</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>ExtendedPrice</DataField>
            <ColumnId>68096333-c869-44c2-9b19-51d9058e50d8</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>ExtendedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
    return isMultiCurrencyEnabled();
}</HideCondition>
            <Width>4</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode />
            <ExchangeRate />
            <ExchangeRateType>BaseRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFSDataCurrencyCol>
            <StyleScheme />
            <DataField>ExtendedPrice</DataField>
            <ColumnId>ff4abcfa-992a-4721-8841-c0c0b6e89485</ColumnId>
            <HorizontalAlignment>right</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>ExtendedPrice</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
    return !isMultiCurrencyEnabled();
}</HideCondition>
            <Width>4</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
            <CurrentCode>SalesOrder.CurrencyCode</CurrentCode>
            <ExchangeRate>SalesOrder.ExchangeRate</ExchangeRate>
            <ExchangeRateType>EntityRate</ExchangeRateType>
            <DecimalDigits>-1</DecimalDigits>
          </QFSDataCurrencyCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>LineType</DataField>
            <ColumnId>ca87da6c-54ec-4780-b7c9-ff6e49313f91</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>LineType</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
    if (Sage.Utility.getModeId() === 'insert') {
        return true;
    }
    return !isIntegrationContractEnabled();
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>CommodityType</DataField>
            <ColumnId>7f13becf-d7b7-41ec-82af-24215aec5077</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>CommodityType</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition>function () {
    return !isIntegrationContractEnabled();
}</HideCondition>
            <Width>-1</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>Product.WarehouseID</DataField>
            <ColumnId>fefa474f-e28a-4837-a374-ee2910aaccc1</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>Product.WarehouseID</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>4</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>LastOrder</DataField>
            <ColumnId>e184a405-36df-4981-bcbf-6bef44702e45</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>true</IsSortable>
            <SortField>LastOrder</SortField>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>8</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
          <QFEditableCol>
            <StyleScheme />
            <DataField>Product.QtyAvailable</DataField>
            <ColumnId>109a9fea-a4ac-4fd6-ac3e-6cd49e07ae7e</ColumnId>
            <HorizontalAlignment>left</HorizontalAlignment>
            <HeaderAlignment>left</HeaderAlignment>
            <SortDirection>None</SortDirection>
            <IsSortable>false</IsSortable>
            <MultiCurrencyDependent>false</MultiCurrencyDependent>
            <IsEditable>false</IsEditable>
            <HideCondition />
            <Width>4</Width>
            <CustomFormatter />
            <AbbreviationLength>0</AbbreviationLength>
          </QFEditableCol>
        </Columns>
        <ConditionalWhere>function () {
            //Modified 2014-1-8 PG
            var whereclause = 'SalesOrder.Id eq "' + Sage.Utility.getCurrentEntityId() + '"';

            //Add a filter condition on Family from the dynamic checkboxes which populate a hidden field.
            //var familyList = document.getElementById('hidCheckedFilters').value;            
            var familyList = document.getElementById('TabControl_element_SalesOrderProducts_element_view_SalesOrderProducts_SalesOrderProducts_hidCheckedFilters').value;
            //alert(familyList);
            if (familyList.length &gt; 0) {
                whereclause += ' and Family not in (' + familyList + ')';
            }

            //return 'SalesOrder.Id eq "' + Sage.Utility.getCurrentEntityId() + '"';
            return whereclause;
            //Modified 2014-1-8 PG
        }</ConditionalWhere>
        <Select>
          <string>Id</string>
          <string>Product.Id</string>
          <string>SalesOrder.CurrencyCode</string>
          <string>SalesOrder.OperatingCompany.Id</string>
          <string>SalesOrder.SlxPriceList.Id</string>
        </Select>
        <Include>
          <string>SalesOrder</string>
          <string>Product</string>
        </Include>
        <FeedCategory>InternalAppEntities</FeedCategory>
        <OnGetMappingId />
        <ParentRelationshipPropertyName>SalesOrder</ParentRelationshipPropertyName>
        <ChildRelationshipPropertyName>Product</ChildRelationshipPropertyName>
        <OnDataChange>function (entity, attribute, oldValue, newValue) {
    if (oldValue === newValue) {
        return;
    }
    if (attribute === 'Discount') {
        entity.CalculatedPrice = entity.Price - (entity.Price * entity.Discount);
    } else if (attribute === 'CalculatedPrice') {
        var calculated = 0;
        if (entity.Price &gt; 0) {
            calculated = (entity.Price - entity.CalculatedPrice) / entity.Price;
        }
        entity.Discount = Math.round(calculated * 10000) / 10000;
    }
    if ((attribute === 'Discount') || (attribute === 'CalculatedPrice')) {
        //entity.ExtendedPrice = entity.CalculatedPrice * entity.Quantity;
        entity.ExtendedPrice = (entity.Price - (entity.Price * entity.Discount)) * entity.Quantity;        
    }
	// ssommerfeldt Removed the need to reduce Quantity
    //if (attribute === 'Quantity') {
    //	if (newValue &gt; entity.Product.QtyAvailable) {
    //    	alert('Error: You cannot order more than the available: ' + entity.Product.QtyAvailable + ' of the item: ' + entity.ActualID);
    //            entity.Quantity = oldValue;
    //    } else {
    //            entity.ExtendedPrice = (entity.Price - (entity.Price * entity.Discount)) * entity.Quantity; 
    //    }
    // }
    if (attribute === 'Program') {
        if (!entity.Product || typeof entity.Product.$key === 'undefined') {
            /* Custom product (FreeText). */
            entity.Program = null;
            return;
        }
        var sUrl = String.format("slxdata.ashx/slx/dynamic/-/productPrograms?select=Price&amp;where=Product.Id eq '{0}' and Program eq '{1}'&amp;format=json&amp;_t={2}",
                    entity.Product.$key, newValue, new Date().getTime().toString());
        $.ajax({
            type: "GET",
            async: false,
            contentType: "application/json",
            url: sUrl,
            dataType: 'json',
            success: function (programPrice) {
                if (programPrice.$resources != null &amp;&amp; programPrice.$resources.length == 1) {
                    entity.Price = programPrice.$resources[0].Price;
                    entity.CalculatedPrice = entity.Price - (entity.Price * entity.Discount);
                    entity.ExtendedPrice = entity.CalculatedPrice * entity.Quantity;
                }
            },
            data: {},
            error: function (request, status, error) {
                var sError = String.format("There was an error opening {0}. StatusText: {1}; StatusCode: {2}.", sUrl, request.statusText, request.status);
                if (dojo.isString(request.responseText)) {
                    if ((request.responseText.indexOf("[", 0) == 0) &amp;&amp; (request.responseText.lastIndexOf("]") == request.responseText.length - 1)) {
                        var oSDataError = dojo.fromJson(request.responseText);
                        if (dojo.isArray(oSDataError)) {
                            sError = String.format("There was an error opening {0}. Severity: {1}; SDataCode: {2}; Message: {3}; ApplicationCode: {4}; StatusText: {5}; StatusCode: {6}.",
                                        sUrl, oSDataError[0].severity, oSDataError[0].sdataCode, oSDataError[0].message, oSDataError[0].applicationCode, request.statusText, request.status);
                        }
                    }
                }
                Ext.Msg.show({
                    title: "Sage SalesLogix",
                    msg: sError,
                    buttons: Ext.Msg.OK,
                    icon: Ext.MessageBox.ERROR
                });
            }
        })
    }
    
      
}</OnDataChange>
        <OnAdd />
        <Tools>
          <SDataGridSaveTool>
            <Name>Save</Name>
            <Image>[Localization!Global_Images:Save_16x16]</Image>
            <DisplayInInsert>false</DisplayInInsert>
            <MergePosition>Default</MergePosition>
            <MergeControlId />
            <OnClick>function () {
            try {
                if (Sage.Utility.getModeId() !== 'insert') {
                    __doPostBack('MainContent', '');
                }
            } catch (err) {
                alert(err.Message);
            }
        }</OnClick>
            <StyleScheme />
            <AppliedSecurity />
          </SDataGridSaveTool>
          <SDataGridCancelTool>
            <Name>Cancel</Name>
            <Image>[Localization!Global_Images:Reset_16x16]</Image>
            <DisplayInInsert>false</DisplayInInsert>
            <MergePosition>Default</MergePosition>
            <MergeControlId />
            <OnClick>//default Cancel behavior</OnClick>
            <StyleScheme />
            <AppliedSecurity />
          </SDataGridCancelTool>
          <SDataGridDeleteTool>
            <Name>Delete</Name>
            <Image>[Localization!Global_Images:Delete_16x16]</Image>
            <DisplayInInsert>false</DisplayInInsert>
            <MergePosition>Default</MergePosition>
            <MergeControlId />
            <OnClick>function () { if (Sage.Utility.getModeId() !== 'insert') { __doPostBack('MainContent', ''); } }</OnClick>
            <StyleScheme />
            <AppliedSecurity />
          </SDataGridDeleteTool>
        </Tools>
      </QFSDataGrid>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.QFControls.QFDataSource, Sage.Platform.QuickForms.QFControls">
      <QFDataSource>
        <Column>0</Column>
        <Row>1</Row>
        <Visible>false</Visible>
        <HotKey>48</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>dsSalesOrderItems</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <EntityTypeName>SalesOrderItem</EntityTypeName>
        <GetByMethod />
        <GetByProperty>SalesOrderItems</GetByProperty>
        <UseSmartSelection>true</UseSmartSelection>
        <DataOptional>false</DataOptional>
      </QFDataSource>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.QFControls.QFHidden, Sage.Platform.QuickForms.QFControls">
      <QFHidden>
        <Column>0</Column>
        <Row>0</Row>
        <Visible>false</Visible>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>hidCheckedFilters</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
      </QFHidden>
    </Control>
  </Controls>
  <ToolControls>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFElementSpacer, Sage.Platform.QuickForms">
      <QFElementSpacer>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId />
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
      </QFElementSpacer>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFElementSpacer, Sage.Platform.QuickForms">
      <QFElementSpacer>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId />
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
      </QFElementSpacer>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFButton, Sage.Platform.QuickForms">
      <QFButton>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>QFButton</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <ButtonType>Icon</ButtonType>
        <Image>[Localization!Global_Images:plus_16x16]</Image>
        <OnClientClick />
        <OnClickAction>
          <ResourceKey>QFButton</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.CSharpSnippetActionItem, Sage.Platform.QuickForms">
            <CSharpSnippetActionItem>
              <MethodName>QFButton_ClickAction</MethodName>
              <CSharpCodeSnippet>//Product Search
    
    Sage.Entity.Interfaces.ISalesOrderItem _entity = BindingSource.Current as Sage.Entity.Interfaces.ISalesOrderItem;
    if (_entity != null) {
        object _parent = GetParentEntity();
        if (DialogService.ChildInsertInfo != null) {
            if (_parent != null) {
                if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) {
                    DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
                }
            }
        }
    }
    
    
if (DialogService != null)
{
  // InsertChildDialogActionItem
  DialogService.SetSpecs(400, 600, "ProductSearch", GetLocalResourceObject("35bcdfcb-61df-432f-a950-635223878c1b.DialogTitleOverride").ToString() );
  DialogService.EntityType = typeof(Sage.Entity.Interfaces.ISalesOrderItem); 
  DialogService.SetChildIsertInfo(
    typeof(Sage.Entity.Interfaces.ISalesOrderItem),
    typeof(Sage.Entity.Interfaces.ISalesOrder),
    typeof(Sage.Entity.Interfaces.ISalesOrderItem).GetProperty("SalesOrder"),
    typeof(Sage.Entity.Interfaces.ISalesOrder).GetProperty("SalesOrderItems"));
  DialogService.ShowDialog();
}</CSharpCodeSnippet>
            </CSharpSnippetActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>False</RefreshData>
        </OnClickAction>
      </QFButton>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFButton, Sage.Platform.QuickForms">
      <QFButton>
        <Column>0</Column>
        <Row>0</Row>
        <Visible>false</Visible>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>cmdAddProduct</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <ButtonType>Icon</ButtonType>
        <Image>[Localization!Global_Images:plus_16x16]</Image>
        <OnClientClick />
        <OnClickAction>
          <ResourceKey>cmdAddProduct</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.CSharpSnippetActionItem, Sage.Platform.QuickForms">
            <CSharpSnippetActionItem>
              <MethodName>cmdAddProduct_ClickAction</MethodName>
              <CSharpCodeSnippet>    //Add Sales Products
    Sage.Entity.Interfaces.ISalesOrderItem _entity = BindingSource.Current as Sage.Entity.Interfaces.ISalesOrderItem;
    if (_entity != null) {
        object _parent = GetParentEntity();
        if (DialogService.ChildInsertInfo != null) {
            if (_parent != null) {
                if (DialogService.ChildInsertInfo.ParentReferenceProperty != null) {
                    DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
                }
            }
        }
    }
    
    
if (DialogService != null)
{
  // InsertChildDialogActionItem
  DialogService.SetSpecs(400, 600, "AddSalesProducts", GetLocalResourceObject("35bcdfcb-61df-432f-a950-635223878c1b.DialogTitleOverride").ToString() );
  DialogService.EntityType = typeof(Sage.Entity.Interfaces.ISalesOrderItem); 
  DialogService.SetChildIsertInfo(
    typeof(Sage.Entity.Interfaces.ISalesOrderItem),
    typeof(Sage.Entity.Interfaces.ISalesOrder),
    typeof(Sage.Entity.Interfaces.ISalesOrderItem).GetProperty("SalesOrder"),
    typeof(Sage.Entity.Interfaces.ISalesOrder).GetProperty("SalesOrderItems"));
  DialogService.ShowDialog();
}</CSharpCodeSnippet>
            </CSharpSnippetActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>False</RefreshData>
        </OnClickAction>
      </QFButton>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFButton, Sage.Platform.QuickForms">
      <QFButton>
        <Column>0</Column>
        <Row>0</Row>
        <Visible>false</Visible>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>btnLockAll</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <ButtonType>Icon</ButtonType>
        <Image>[Localization!Global_Images:lock_all_16x16]</Image>
        <OnClientClick />
        <OnClickAction>
          <ResourceKey>btnLockAll</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.BusinessRuleActionItem, Sage.Platform.QuickForms">
            <BusinessRuleActionItem>
              <BusinessRule>LockPricingForSOItems</BusinessRule>
              <Object>SalesOrder</Object>
              <Parameters />
              <PassResultsToNextAction>False</PassResultsToNextAction>
              <OnComplete typeName="Sage.Platform.QuickForms.ActionItems.RefreshDataAction, Sage.Platform.QuickForms">
                <RefreshDataAction>
                  <MethodName>btnLockAll_ClickActionBRC</MethodName>
                </RefreshDataAction>
              </OnComplete>
            </BusinessRuleActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>True</RefreshData>
        </OnClickAction>
      </QFButton>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFButton, Sage.Platform.QuickForms">
      <QFButton>
        <Column>0</Column>
        <Row>0</Row>
        <Visible>false</Visible>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>btnUnlockAll</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <ButtonType>Icon</ButtonType>
        <Image>[Localization!Global_Images:unlock_all_16x16]</Image>
        <OnClientClick />
        <OnClickAction>
          <ResourceKey>btnUnlockAll</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.BusinessRuleActionItem, Sage.Platform.QuickForms">
            <BusinessRuleActionItem>
              <BusinessRule>UnLockPricingForSOItems</BusinessRule>
              <Object>SalesOrder</Object>
              <Parameters />
              <PassResultsToNextAction>False</PassResultsToNextAction>
              <OnComplete typeName="Sage.Platform.QuickForms.ActionItems.RefreshDataAction, Sage.Platform.QuickForms">
                <RefreshDataAction>
                  <MethodName>btnUnlockAll_ClickActionBRC</MethodName>
                </RefreshDataAction>
              </OnComplete>
            </BusinessRuleActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>True</RefreshData>
        </OnClickAction>
      </QFButton>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFButton, Sage.Platform.QuickForms">
      <QFButton>
        <Column>0</Column>
        <Row>0</Row>
        <Enabled>false</Enabled>
        <Visible>false</Visible>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>btnRenumber</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <ButtonType>Icon</ButtonType>
        <Image>[Localization!Global_Images:renumber_16x16]</Image>
        <OnClientClick />
        <OnClickAction>
          <ResourceKey>btnRenumber</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.BusinessRuleActionItem, Sage.Platform.QuickForms">
            <BusinessRuleActionItem>
              <BusinessRule>ReAssignLineNumbers</BusinessRule>
              <Object>SalesOrder</Object>
              <Parameters />
              <PassResultsToNextAction>False</PassResultsToNextAction>
              <OnComplete typeName="Sage.Platform.QuickForms.ActionItems.RefreshDataAction, Sage.Platform.QuickForms">
                <RefreshDataAction>
                  <MethodName>btnRenumber_ClickActionBRC</MethodName>
                </RefreshDataAction>
              </OnComplete>
            </BusinessRuleActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>True</RefreshData>
        </OnClickAction>
      </QFButton>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFButton, Sage.Platform.QuickForms">
      <QFButton>
        <Column>0</Column>
        <Row>0</Row>
        <Visible>false</Visible>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>btnAddCustomProduct</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <ButtonType>StandardButton</ButtonType>
        <Image />
        <OnClientClick />
        <OnClickAction>
          <ResourceKey>btnAddCustomProduct</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.NoActionActionItem, Sage.Platform.QuickForms">
            <NoActionActionItem>
              <MethodName />
            </NoActionActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>False</RefreshData>
        </OnClickAction>
      </QFButton>
    </Control>
  </ToolControls>
  <Columns>
    <ColumnStyle>
      <SizeType>Percent</SizeType>
      <Width>100</Width>
    </ColumnStyle>
  </Columns>
  <Rows>
    <RowStyle>
      <SizeType>Absolute</SizeType>
      <Height>35</Height>
    </RowStyle>
    <RowStyle>
      <SizeType>Absolute</SizeType>
      <Height>35</Height>
    </RowStyle>
  </Rows>
  <Description />
  <UseEntityNameAsTitle>false</UseEntityNameAsTitle>
  <EntityTypeName>ISalesOrder</EntityTypeName>
  <DefaultNamespace>Sage.Entity.Interfaces</DefaultNamespace>
  <AssemblyName>Sage.Entity.Interfaces</AssemblyName>
</QuickForm>